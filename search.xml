<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用模板（自己整理）</title>
      <link href="/undefined/ce3c161.html"/>
      <url>/undefined/ce3c161.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一讲-基础算法"><a href="#第一讲-基础算法" class="headerlink" title="第一讲_基础算法"></a>第一讲_基础算法</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;          <span class="comment">// 数组实际长度</span></span><br><span class="line"><span class="type">int</span> q[N];       <span class="comment">// 存储待排序元素的数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果 l&gt;=r，说明区间内元素数量不超过1，无需排序</span></span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 选择基准值：取中间位置的元素</span></span><br><span class="line">    <span class="type">int</span> x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 初始化左右指针</span></span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 双指针扫描，将数组分为两部分</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// i指针右移，找到第一个大于等于基准值的元素</span></span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line">        <span class="comment">// j指针左移，直到找到第一个小于等于基准值的元素</span></span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line">        <span class="comment">// 如果i和j指针还没有相遇，则交换这两个元素</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归处理左右两部分</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j<span class="number">+1</span> ,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">quick_sort</span>(q, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="常规归并排序"><a href="#常规归并排序" class="headerlink" title="常规归并排序"></a>常规归并排序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;                  <span class="comment">// 数组实际长度</span></span><br><span class="line"><span class="type">int</span> q[N], temp[N];      <span class="comment">// q[]为原始数组，temp[]为辅助合并的临时数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 递归终止条件：区间内元素数量不超过1</span></span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算中间位置，将数组分为左右两部分</span></span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归排序左右两部分</span></span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 合并两个有序子数组</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;              <span class="comment">// temp数组的当前索引</span></span><br><span class="line">    <span class="type">int</span> i = l, j = mid + <span class="number">1</span>; <span class="comment">// i指向左半部分起始，j指向右半部分起始</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 双指针扫描，将较小元素依次放入temp数组</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j]) </span><br><span class="line">            temp[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            temp[k++] = q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将剩余元素复制到temp数组</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) temp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) temp[k++] = q[j++];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将排好序的temp数组复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span>(i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) </span><br><span class="line">        q[i] = temp[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">merge_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用：统计逆序对的数量"><a href="#应用：统计逆序对的数量" class="headerlink" title="应用：统计逆序对的数量"></a>应用：统计逆序对的数量</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721151525071.png" alt="image-20250721151525071"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 归并排序求逆序对的数量</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;  <span class="comment">// 使用长整型防止结果溢出</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;                 <span class="comment">// 数组长度</span></span><br><span class="line"><span class="type">int</span> q[N], tmp[N];      <span class="comment">// q[]为原数组，tmp[]为辅助数组</span></span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 递归终止条件：区间长度为1或0时逆序对数量为0</span></span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算中间点，将数组分为两部分</span></span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归计算左右两部分的逆序对数量</span></span><br><span class="line">    LL res = <span class="built_in">merge_sort</span>(l, mid) + <span class="built_in">merge_sort</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;      <span class="comment">// 临时数组索引</span></span><br><span class="line">    <span class="type">int</span> i = l;      <span class="comment">// 左半部分指针</span></span><br><span class="line">    <span class="type">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 右半部分指针</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 双指针扫描，将较小元素依次放入temp数组</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j])</span><br><span class="line">        &#123;</span><br><span class="line">            tmp[k++] = q[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tmp[k++] = q[j++];</span><br><span class="line">            <span class="comment">// 左半部分从i到mid的所有元素都与q[j]构成逆序对</span></span><br><span class="line">            res += mid - i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理剩余元素</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) tmp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) tmp[k++] = q[j++];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将排好序的临时数组复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) q[i] = tmp[j];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, <span class="built_in">merge_sort</span>(<span class="number">0</span>, n - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], cnt;  <span class="comment">// h[]存储堆元素（下标从1开始），cnt记录当前堆的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向下调整</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = u;  <span class="comment">// t记录当前节点、左孩子、右孩子中的最小值下标</span></span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> &lt;= cnt &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= cnt &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (u != t) <span class="comment">// 如果最小值不是当前节点，交换并递归调整</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(h[u], h[t]);</span><br><span class="line">        <span class="built_in">down</span>(t);    <span class="comment">// 递归调整交换后的子节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向上调整</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 当不是根节点，且当前节点小于父节点时，向上调整</span></span><br><span class="line">    <span class="keyword">while</span> (u / <span class="number">2</span> &gt;= <span class="number">1</span> &amp;&amp; h[u] &lt; h[u / <span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(h[u], h[u / <span class="number">2</span>]);  <span class="comment">// 与父节点交换</span></span><br><span class="line">        u /= <span class="number">2</span>;  <span class="comment">// 继续向上调整</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    h[++cnt] = x;  <span class="comment">// 将新元素放到堆的末尾，堆大小+1</span></span><br><span class="line">    <span class="built_in">up</span>(cnt);  <span class="comment">// 从新元素位置向上调整</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class="line">    cnt = n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建小根堆：从最后一个非叶子节点开始向前调整</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span>; i; i--) <span class="built_in">down</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出数列中前 m 小的数</span></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, h[<span class="number">1</span>]);</span><br><span class="line">        h[<span class="number">1</span>] = h[cnt--];    <span class="comment">//删除最小值，替换成最后一个元素</span></span><br><span class="line">        <span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><h3 id="常规二分"><a href="#常规二分" class="headerlink" title="常规二分"></a>常规二分</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721154757568.png" alt="image-20250721154757568"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;    <span class="comment">// n为数组长度，m为查询次数</span></span><br><span class="line"><span class="type">int</span> q[N];    <span class="comment">// 存储有序数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找第一个大于等于k的位置（左边界）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span>(q[mid] &gt;= k)</span><br><span class="line">            r = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(q[l] != k) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找最后一个小于等于k的位置（右边界）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(q[mid] &lt;= k)</span><br><span class="line">            l = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(q[l] != k) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理多次查询</span></span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查找左边界</span></span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">bsearch_1</span>(<span class="number">0</span>, n<span class="number">-1</span>, k);</span><br><span class="line">        <span class="keyword">if</span>(l != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 若左边界存在，查找右边界</span></span><br><span class="line">            <span class="type">int</span> r = <span class="built_in">bsearch_2</span>(<span class="number">0</span>, n<span class="number">-1</span>, k);</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用：计算数的三次方根"><a href="#应用：计算数的三次方根" class="headerlink" title="应用：计算数的三次方根"></a>应用：计算数的三次方根</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721155431528.png" alt="image-20250721155431528"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((x * x * x) &gt;= n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 结果精确到小数点后6位，则eps要开6+2=8位</span></span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line">    <span class="keyword">while</span>(r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">double</span> left = <span class="number">-100</span>, right = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> res = <span class="built_in">bsearch_3</span>(left, right);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6lf&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="upper和lower-bound"><a href="#upper和lower-bound" class="headerlink" title="upper和lower_bound"></a>upper和lower_bound</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 lower_bound 查找第一个 &gt;= target 的元素位置</span></span><br><span class="line"><span class="keyword">auto</span> low = <span class="built_in">lower_bound</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), target);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 upper_bound 查找第一个 &gt; target 的元素位置</span></span><br><span class="line"><span class="keyword">auto</span> up = <span class="built_in">upper_bound</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), target);</span><br></pre></td></tr></table></figure><hr><h2 id="高精度算法"><a href="#高精度算法" class="headerlink" title="高精度算法"></a>高精度算法</h2><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721160523194.png" alt="image-20250721160523194"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;  <span class="comment">// 存储结果的向量（逆序存储）</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;  <span class="comment">// 进位标志</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历每一位，处理到较长数的最后一位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; A.<span class="built_in">size</span>()) t += A[i];  <span class="comment">// 累加A的当前位</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; B.<span class="built_in">size</span>()) t += B[i];  <span class="comment">// 累加B的当前位</span></span><br><span class="line">        </span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);  <span class="comment">// 当前位的结果（取模10）</span></span><br><span class="line">        t /= <span class="number">10</span>;  <span class="comment">// 计算进位（整除10）</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理最后可能的进位</span></span><br><span class="line">    <span class="keyword">if</span>(t) c.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b;  <span class="comment">// 输入的两个大整数</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;  <span class="comment">// 存储大整数的每一位（逆序存储）</span></span><br><span class="line">    </span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将字符串转换为数字向量，逆序存储（低位在前）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用高精度加法函数</span></span><br><span class="line">    <span class="keyword">auto</span> c = <span class="built_in">add</span>(A, B);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 逆序输出结果（高位在前）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = c.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721161546052.png" alt="image-20250721161546052"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较两个大整数的大小</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; A, vector&lt;<span class="type">int</span>&gt; B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 长度相同时，从最高位（向量末尾）开始逐位比较</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span>(A[i] != B[i]) </span><br><span class="line">            <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高精度减法（要求 A &gt;= B）</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;  <span class="comment">// 存储结果的向量（逆序存储）</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;  <span class="comment">// 借位标志（0 或 1）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历被减数的每一位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;  <span class="comment">// 减去上一位的借位</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 若减数还有当前位，则减去该位</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 当前位的计算结果（考虑借位后）</span></span><br><span class="line">        c.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新借位状态</span></span><br><span class="line">        <span class="keyword">if</span>(t &lt; <span class="number">0</span>) t = <span class="number">1</span>;  <span class="comment">// 需要借位，下一位减 1</span></span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;  <span class="comment">// 无需借位</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 去除结果前导 0（如 1000-999=0001，应输出 1）</span></span><br><span class="line">    <span class="keyword">while</span>(c.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; c.<span class="built_in">back</span>() == <span class="number">0</span>) c.<span class="built_in">pop_back</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b;  <span class="comment">// 输入的两个大整数</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;  <span class="comment">// 存储逆序的大整数（低位在前）</span></span><br><span class="line">    </span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将字符串转换为逆序的数字向量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据大小关系处理减法</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">cmp</span>(A, B))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> c = <span class="built_in">sub</span>(A, B);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = c.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> c = <span class="built_in">sub</span>(B, A);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);  <span class="comment">// 输出负号</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = c.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721162318655.png" alt="image-20250721162318655"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;  <span class="comment">// 存储结果的向量（逆序存储）</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;  <span class="comment">// 进位标志</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历A的每一位，并处理进位，直到没有进位为止</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;  <span class="comment">// 当前位与乘数相乘，加上进位</span></span><br><span class="line">        </span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);  <span class="comment">// 当前位的结果（取模10）</span></span><br><span class="line">        </span><br><span class="line">        t /= <span class="number">10</span>;  <span class="comment">// 计算进位（整除10）</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 去除结果中的前导0（例如 1234 * 0 = 0000，应输出0）</span></span><br><span class="line">    <span class="keyword">while</span>(c.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; c.<span class="built_in">back</span>() == <span class="number">0</span>) c.<span class="built_in">pop_back</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a;  <span class="comment">// 输入的高精度整数</span></span><br><span class="line">    <span class="type">int</span> b;     <span class="comment">// 输入的低精度整数</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">    </span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将字符串转换为逆序的数字向量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> c = <span class="built_in">mul</span>(A, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = c.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721163211211.png" alt="image-20250721163211211"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;  <span class="comment">// 逆序存储商的向量</span></span><br><span class="line">    </span><br><span class="line">    r = <span class="number">0</span>;  <span class="comment">// 初始化余数为0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];  <span class="comment">// 将余数扩大10倍并加上当前位的值</span></span><br><span class="line">        c.<span class="built_in">push_back</span>(r / b);  <span class="comment">// 计算当前位的商</span></span><br><span class="line">        r %= b;  <span class="comment">// 更新余数为当前除法的余数</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">reverse</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 去除结果中的前导0</span></span><br><span class="line">    <span class="keyword">while</span>(c.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; c.<span class="built_in">back</span>() == <span class="number">0</span>) c.<span class="built_in">pop_back</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a;  <span class="comment">// 输入的高精度整数</span></span><br><span class="line">    <span class="type">int</span> b;     <span class="comment">// 输入的低精度整数（除数，b≠0）</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> r; <span class="comment">// 存储余数</span></span><br><span class="line">    </span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将字符串转换为逆序的数字向量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> c = <span class="built_in">div</span>(A, b, r);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = c.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%d&quot;</span>, r);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721164841341.png" alt="image-20250721164841341"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">int</span> arr[N][N];</span><br><span class="line"><span class="type">int</span> res[N][N]; <span class="comment">// res[i, j] 为第i行j列格子左上部分所有元素的和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i][j]);</span><br><span class="line">            <span class="comment">// 计算前缀和</span></span><br><span class="line">            res[i][j] = res[i<span class="number">-1</span>][j] + res[i][j<span class="number">-1</span>] - res[i<span class="number">-1</span>][j<span class="number">-1</span>] + arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">        <span class="comment">// 计算矩阵区间和</span></span><br><span class="line">        cout&lt;&lt;res[x2][y2] - res[x1<span class="number">-1</span>][y2] - res[x2][y1<span class="number">-1</span>] + res[x1<span class="number">-1</span>][y1<span class="number">-1</span>]&lt;&lt;endl; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721170335367.png" alt="image-20250721170335367"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">const</span>  <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N][N], b[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[x1][y1] += c;     <span class="comment">//原前缀和矩阵（x1,y1）后面的元素都会 + c</span></span><br><span class="line">    b[x2<span class="number">+1</span>][y1] -= c;   <span class="comment">//进行抵消，只在给定区间 + c</span></span><br><span class="line">    b[x1][y2<span class="number">+1</span>] -= c;</span><br><span class="line">    b[x2<span class="number">+1</span>][y2<span class="number">+1</span>] +=c;  <span class="comment">//进行补偿</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;=m; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">    <span class="comment">//b[i][j] = a[i][j] - a[i-1][j] - a[i][j-1] + a[i-1][j-1] </span></span><br><span class="line">    <span class="comment">//a矩阵是b矩阵的前缀和，b矩阵是a矩阵的差分        </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="built_in">insert</span>(i, j, i, j, a[i][j]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2, c;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;</span><br><span class="line">        <span class="built_in">insert</span>(x1, y1, x2, y2, c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//还原成前缀和矩阵</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            b[i][j] = b[i<span class="number">-1</span>][j] + b[i][j<span class="number">-1</span>] - b[i<span class="number">-1</span>][j<span class="number">-1</span>] + b[i][j];</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i][j]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第二讲-数据结构"><a href="#第二讲-数据结构" class="headerlink" title="第二讲_数据结构"></a>第二讲_数据结构</h1><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// head 表示头结点，值表示头节点的next指针是多少</span></span><br><span class="line"><span class="comment">// e[i] 存储节点i的值</span></span><br><span class="line"><span class="comment">// ne[i] 存储节点i的next指针（idx）</span></span><br><span class="line"><span class="comment">// idx 存储当前已经用到了哪个点</span></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;  <span class="comment">//-1表示空集</span></span><br><span class="line">    idx = <span class="number">0</span>;    <span class="comment">//下标从0开始，表示当前操作第 idx + 1 个元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将x插到头结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    e[idx] = x, ne[idx] = head, head = idx, idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将x插到下标是k的点后面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x, ne[idx] = ne[k], ne[k] = idx, idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将下标是k的点后面的一个点删掉</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k, x;</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line"></span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&#x27;H&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add_to_head</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            <span class="keyword">if</span> (!k) head = ne[head];</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">remove</span>(k - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(k - <span class="number">1</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head; i != <span class="number">-1</span>; i = ne[i]) cout &lt;&lt; e[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 0是左端点，1是右端点</span></span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在节点a的右边插入一个数x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    l[idx] = a, r[idx] = r[a];</span><br><span class="line">    l[r[a]] = idx, r[a] = idx;</span><br><span class="line">    idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l[r[a]] = l[a];</span><br><span class="line">    r[l[a]] = r[a];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        string op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="type">int</span> k, x;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;L&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">insert</span>(<span class="number">0</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;R&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">insert</span>(l[<span class="number">1</span>], x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;D&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            <span class="built_in">remove</span>(k + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;IL&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">insert</span>(l[k + <span class="number">1</span>], x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">insert</span>(k + <span class="number">1</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = r[<span class="number">0</span>]; i != <span class="number">1</span>; i = r[i]) cout &lt;&lt; e[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stk[N], tt;<span class="comment">//初始栈顶指针指向 0 位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="comment">//栈不为空且栈顶元素大于等于 x 时，弹出栈顶元素（使栈具有单调性）</span></span><br><span class="line">        <span class="keyword">while</span> (tt &amp;&amp; stk[tt] &gt;= x) tt--;</span><br><span class="line">        <span class="comment">//如果栈空</span></span><br><span class="line">        <span class="keyword">if</span> (!tt) <span class="built_in">printf</span>(<span class="string">&quot;-1 &quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, stk[tt]);</span><br><span class="line">        <span class="comment">// x 入栈</span></span><br><span class="line">        stk[++tt] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="单调队列-滑动窗口"><a href="#单调队列-滑动窗口" class="headerlink" title="单调队列-滑动窗口"></a>单调队列-滑动窗口</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入样例：</span></span><br><span class="line"><span class="comment">//8 3</span></span><br><span class="line"><span class="comment">//1 3 -1 -3 5 3 6 7</span></span><br><span class="line"><span class="comment">//输出样例：</span></span><br><span class="line"><span class="comment">//-1 -3 -3 -3 3 3</span></span><br><span class="line"><span class="comment">//3 3 5 5 6 7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], q[N]; <span class="comment">//数组  单调队列：存储元素下标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断队头元素是否还在队列里面，不应该在，则弹出队头元素（保持 k 个元素）</span></span><br><span class="line">        <span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line">        <span class="comment">//队列不为空且队尾元素大于等于 x 时，弹出队尾元素（使队列具有单调性）</span></span><br><span class="line">        <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt--;</span><br><span class="line">        <span class="comment">//当前元素下标 i 入队</span></span><br><span class="line">        q[++tt] = i;</span><br><span class="line"><span class="comment">//判断是否满足 k 个元素</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line">        <span class="comment">//队列不为空且队尾元素小于等于 x 时，弹出队尾元素（使队列具有单调性）</span></span><br><span class="line">        <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt--;</span><br><span class="line">        <span class="comment">//当前元素下标 i 入队</span></span><br><span class="line">        q[++tt] = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721204812541.png" alt="image-20250721204812541"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N], ph[N], hp[N], cnt;</span><br><span class="line"><span class="comment">// h[]：堆的元素存储（小根堆）</span></span><br><span class="line"><span class="comment">// ph[k]：**第k次插入的元素**在堆中的位置（pos）</span></span><br><span class="line"><span class="comment">// hp[pos]：**堆中pos位置的元素**是第几次插入的（k）</span></span><br><span class="line"><span class="comment">// cnt：当前堆的大小</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(ph[hp[a]], ph[hp[b]]); <span class="comment">// 根据堆位置获取插入序号，然后在交换ph[]中的元素</span></span><br><span class="line">    <span class="built_in">swap</span>(hp[a], hp[b]);         <span class="comment">// 交换堆位置对应的插入序号</span></span><br><span class="line">    <span class="built_in">swap</span>(h[a], h[b]);           <span class="comment">// 交换堆中的元素值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> &lt;= cnt &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= cnt &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (u != t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, t);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (u / <span class="number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, u / <span class="number">2</span>);</span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> k, x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, op);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(op, <span class="string">&quot;I&quot;</span>))   <span class="comment">// 1. 插入操作 I x</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            cnt++;  <span class="comment">// 堆大小+1</span></span><br><span class="line">            m++;    <span class="comment">// 插入次数+1（m记录当前是第几次插入）</span></span><br><span class="line">            ph[m] = cnt;    <span class="comment">// 第m次插入的元素在堆中的位置是cnt</span></span><br><span class="line">            hp[cnt] = m;    <span class="comment">// 堆中cnt位置的元素是第m次插入的</span></span><br><span class="line">            h[cnt] = x;     <span class="comment">// 元素值存入堆</span></span><br><span class="line">            <span class="built_in">up</span>(cnt);    <span class="comment">// 向上调整，维持小根堆</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(op, <span class="string">&quot;PM&quot;</span>)) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, h[<span class="number">1</span>]);   <span class="comment">// 2. 输出最小值 PM</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(op, <span class="string">&quot;DM&quot;</span>)) <span class="comment">// 3. 删除最小值 DM</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">heap_swap</span>(<span class="number">1</span>, cnt);  <span class="comment">// 交换堆顶和最后一个元素</span></span><br><span class="line">            cnt--;      <span class="comment">// 堆大小 - 1（删除原堆顶）</span></span><br><span class="line">            <span class="built_in">down</span>(<span class="number">1</span>);    <span class="comment">// 向下调整新堆顶</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(op, <span class="string">&quot;D&quot;</span>))  <span class="comment">// 4. 删除第k次插入的元素 D k</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">            k = ph[k];          <span class="comment">// 找到第k次插入的元素在堆中的位置</span></span><br><span class="line">            <span class="built_in">heap_swap</span>(k, cnt);  <span class="comment">// 交换该位置和最后一个元素</span></span><br><span class="line">            cnt--;              <span class="comment">// 堆大小-1</span></span><br><span class="line">            <span class="built_in">up</span>(k);              <span class="comment">// 向上/向下调整（不确定方向，两者都调用）    </span></span><br><span class="line">            <span class="built_in">down</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// 5. 修改第k次插入的元素为x --- C k x</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;k, &amp;x);</span><br><span class="line">            k = ph[k];  <span class="comment">// 找到第k次插入的元素在堆中的位置</span></span><br><span class="line">            h[k] = x;   <span class="comment">// 更新元素值</span></span><br><span class="line">            <span class="built_in">up</span>(k);      <span class="comment">// 向上/向下调整（不确定方向，两者都调用）</span></span><br><span class="line">            <span class="built_in">down</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="散列表（哈希表）"><a href="#散列表（哈希表）" class="headerlink" title="散列表（哈希表）"></a>散列表（哈希表）</h2><h3 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200003</span>, null = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = (x % N + N) % N;    <span class="comment">// 计算哈希下标</span></span><br><span class="line">    <span class="keyword">while</span> (h[t] != null &amp;&amp; h[t] != x)    <span class="comment">// 当位置被占用且不是目标值时</span></span><br><span class="line">    &#123;</span><br><span class="line">        t++;</span><br><span class="line">        <span class="keyword">if</span> (t == N) t = <span class="number">0</span>;  <span class="comment">// 到达数组末尾则回到开头（循环数组）</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;   <span class="comment">// 返回找到的空位或目标值的位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, op, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (*op == <span class="string">&#x27;I&#x27;</span>) h[<span class="built_in">find</span>(x)] = x;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (h[<span class="built_in">find</span>(x)] == null) <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100003</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N];   <span class="comment">//哈希表的表头数组</span></span><br><span class="line"><span class="type">int</span> e[N];   <span class="comment">//存储链表中节点的值</span></span><br><span class="line"><span class="type">int</span> ne[N];  <span class="comment">//存储链表中节点的下一个节点索引</span></span><br><span class="line"><span class="type">int</span> idx;    <span class="comment">//链表节点的索引</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// c++中负数取模运算规则：</span></span><br><span class="line">    <span class="comment">// 满足数学关系：a = q * b + r</span></span><br><span class="line">    <span class="comment">// 其中 q 是商（向零取整），r 是余数 且 0 ≤ |r| &lt; |b|</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算哈希下标，确保非负</span></span><br><span class="line">    <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">    <span class="comment">// 将新节点插入链表头部</span></span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = h[k];</span><br><span class="line">    h[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 计算哈希下标</span></span><br><span class="line">    <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">    <span class="comment">// 遍历链表查找目标值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[k]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        <span class="keyword">if</span> (e[i] == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//没找到返回 false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化哈希表头为 -1，表示链表为空</span></span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>, op, &amp;x);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (*op == <span class="string">&#x27;I&#x27;</span>) <span class="built_in">insert</span>(x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(x)) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721210920531.png" alt="image-20250721210920531"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL; <span class="comment">// 用无符号长整型存储哈希值，利用自然溢出处理模运算</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, P = <span class="number">131</span>;  <span class="comment">// N 是字符串最大长度，P 是进制基数（经验值选131）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line">ULL h[N], p[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 利用前缀哈希差值计算子串哈希，h[r] - h[l-1] * p[r-l+1] 等价于子串的哈希值</span></span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str + <span class="number">1</span>);   <span class="comment">// 字符串从下标1开始存储</span></span><br><span class="line"></span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        h[i] = h[i - <span class="number">1</span>] * P + str[i];   <span class="comment">// 计算前缀哈希，类似 P 进制数累加</span></span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] * P;            <span class="comment">// 预处理 P 的幂次，用于后续计算子串哈希</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l1, r1, l2, r2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;l1, &amp;r1, &amp;l2, &amp;r2);</span><br><span class="line">        <span class="comment">// 比较两个子串的哈希值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">get</span>(l1, r1) == <span class="built_in">get</span>(l2, r2)) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="KMP字符串匹配"><a href="#KMP字符串匹配" class="headerlink" title="KMP字符串匹配"></a>KMP字符串匹配</h2><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721193746033.png" alt="image-20250721193746033"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> ne[N];</span><br><span class="line"><span class="type">char</span> s[M], p[N];    <span class="comment">//匹配串  模式串</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; p + <span class="number">1</span> &gt;&gt; m &gt;&gt; s + <span class="number">1</span>;    <span class="comment">//下标从 1 开始</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//求 next[] 数组</span></span><br><span class="line">    <span class="comment">//例如模式串：&quot;abababab&quot; ne[] = [0, 0, 1, 2, 3, 4, 5, 6]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// j 没有退回起点 且 不匹配时</span></span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">        <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j++;  <span class="comment">//j + 1 预处理进行匹配</span></span><br><span class="line">        ne[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// KMP匹配过程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// j 没有退回起点 且 发生不匹配时</span></span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">        <span class="comment">//如果匹配，则 j 后移</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span> (j == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i - n);</span><br><span class="line">            <span class="comment">//往后退一步继续匹配</span></span><br><span class="line">            j = ne[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Trie字典树"><a href="#Trie字典树" class="headerlink" title="Trie字典树"></a>Trie字典树</h2><h3 id="应用1：插入并统计字符串出现的次数"><a href="#应用1：插入并统计字符串出现的次数" class="headerlink" title="应用1：插入并统计字符串出现的次数"></a>应用1：插入并统计字符串出现的次数</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721200249889.png" alt="image-20250721200249889"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="comment">// Trie 字典树:单模式串匹配（判断单个字符串是否在字典中）</span></span><br><span class="line"><span class="comment">// AC 自动机:多模式串匹配（在文本中同时查找多个字典词）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Trie（字典树）: 高效存储和查找字符串集合的数据结构</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>]; <span class="comment">//存储从节点 P 沿着 i 这条边走到的子节点</span></span><br><span class="line"><span class="type">int</span> cnt[N]; <span class="comment">//存储以节点 p 结尾的单词插入次数</span></span><br><span class="line"><span class="type">int</span> idx;    <span class="comment">//给每个节点编号（节点数）</span></span><br><span class="line"><span class="type">char</span> str[N];    <span class="comment">//处理的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>; <span class="comment">// 从根节点（编号0）开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;  <span class="comment">// 将字符映射为0-25的索引</span></span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) son[p][u] = ++idx; <span class="comment">// 如果路径不存在，创建新节点</span></span><br><span class="line">        p = son[p][u]; <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p]++; <span class="comment">// 标记字符串结尾，计数器加1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>; <span class="comment">// 从根节点开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 字符映射为索引</span></span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 路径不存在，返回0</span></span><br><span class="line">        p = son[p][u]; <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p]; <span class="comment">// 返回该节点的计数器值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>, op, str);</span><br><span class="line">        <span class="keyword">if</span> (*op == <span class="string">&#x27;I&#x27;</span>) <span class="built_in">insert</span>(str);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用2：最大异或对"><a href="#应用2：最大异或对" class="headerlink" title="应用2：最大异或对"></a>应用2：最大异或对</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721200850227.png" alt="image-20250721200850227"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = <span class="number">3100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], son[M][<span class="number">2</span>], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) <span class="comment">// 处理31位（最高位到最低位）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从最高位开始，右移获取当前位的值（0或1）</span></span><br><span class="line">        <span class="type">int</span> u = x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) son[p][u] = ++idx;  <span class="comment">// 如果路径不存在，创建新节点</span></span><br><span class="line">        p = son[p][u];  <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>, res = <span class="number">0</span>; <span class="comment">// res 记录最大异或值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s = x &gt;&gt; i &amp; <span class="number">1</span>; <span class="comment">// 当前位的值</span></span><br><span class="line">        <span class="keyword">if</span> (son[p][!s]) <span class="comment">// 若存在与当前位相反的路径</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = son[p][!s]; <span class="comment">// 选择相反路径</span></span><br><span class="line">            res += (<span class="number">1</span> &lt;&lt; i);  <span class="comment">//表示将数字 1 向左移动 i 位，相当于计算 2^i</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> p = son[p][s]; <span class="comment">// 否则选择相同路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="built_in">insert</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) res = <span class="built_in">max</span>(res, <span class="built_in">query</span>(a[i]));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="常规并查集"><a href="#常规并查集" class="headerlink" title="常规并查集"></a>常规并查集</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721201623878.png" alt="image-20250721201623878"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[N]; <span class="comment">// p[x] 表示 x 的父节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//返回 x 的祖宗节点 + 路径压缩</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] == x)<span class="comment">//如果递归到根节点则返回</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> p[x] = <span class="built_in">find</span>(p[x]);   <span class="comment">//递归回溯时将路径上的每个节点都指向跟节点（路径压缩）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = i;  <span class="comment">// 初始化每个节点的父节点为自身（编号从 1 开始）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d %d&quot;</span>, op, &amp;a, &amp;b);</span><br><span class="line">        <span class="comment">//并</span></span><br><span class="line">        <span class="keyword">if</span> (*op == <span class="string">&#x27;M&#x27;</span>) p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);   <span class="comment">//合并 a，b 两个元素所属集合</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b)) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用1：统计连通块中点的数量"><a href="#应用1：统计连通块中点的数量" class="headerlink" title="应用1：统计连通块中点的数量"></a>应用1：统计连通块中点的数量</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721202110574.png" alt="image-20250721202110574"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[N], cnt[N]; <span class="comment">// p[x] 表示 x 的父节点，cnt[N]表示当前集合点的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//返回 x 的祖宗节点 + 路径压缩</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] == x)<span class="comment">//如果递归到根节点则返回</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> p[x] = <span class="built_in">find</span>(p[x]);   <span class="comment">//递归回溯时将路径上的每个节点都指向跟节点（路径压缩）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = i;  <span class="comment">// 初始化每个节点的父节点为自身（编号从 1 开始）</span></span><br><span class="line">        cnt[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        string op;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="comment">//并</span></span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;C&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            a = <span class="built_in">find</span>(a), b = <span class="built_in">find</span>(b); <span class="comment">// 先找到两个元素的根节点</span></span><br><span class="line">            <span class="keyword">if</span> (a != b) <span class="comment">// 如果不在同一个集合才需要合并</span></span><br><span class="line">            &#123;</span><br><span class="line">                p[a] = b; <span class="comment">// 将a的根节点合并到b的根节点下</span></span><br><span class="line">                cnt[b] += cnt[a];  <span class="comment">// 更新b集合的大小（加上a集合的大小）</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;Q1&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b)) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a;</span><br><span class="line">            cout &lt;&lt; cnt[<span class="built_in">find</span>(a)] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用2：食物链"><a href="#应用2：食物链" class="headerlink" title="应用2：食物链"></a>应用2：食物链</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721202549275.png" alt="image-20250721202549275"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> p[N];   <span class="comment">//存储每个节点的父节点</span></span><br><span class="line"><span class="type">int</span> d[N];   <span class="comment">//存储当前节点到父节点的 “距离”</span></span><br><span class="line"><span class="comment">//模 3 余 1：吃根节点对应的动物；</span></span><br><span class="line"><span class="comment">//模 3 余 2：被根节点对应的动物吃；</span></span><br><span class="line"><span class="comment">//模 3 余 0：与根节点同类。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] == x)  <span class="comment">//如果递归到根节点则返回</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">find</span>(p[x]); <span class="comment">// 递归找根节点</span></span><br><span class="line">        d[x] += d[p[x]];    <span class="comment">// 更新当前节点到父节点的距离</span></span><br><span class="line">        p[x] = t;           <span class="comment">// 路径压缩，当前节点直接指向根</span></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t, x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;t, &amp;x, &amp;y);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//若动物编号超出范围，直接判定为假话</span></span><br><span class="line">        <span class="keyword">if</span> (x &gt; n || y &gt; n) res++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> px = <span class="built_in">find</span>(x), py = <span class="built_in">find</span>(y);<span class="comment">// 递归找根节点</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//同类语句</span></span><br><span class="line">            <span class="keyword">if</span> (t == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//根节点相同时，若 (d[x] - d[y]) % 3 != 0，说明 x 和 y 不是同类，语句冲突</span></span><br><span class="line">                <span class="keyword">if</span> (px == py &amp;&amp; (d[x] - d[y]) % <span class="number">3</span>) res++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (px != py)  <span class="comment">//根节点不同时，设置 d[px] 使合并后 x 和 y 同类关系成立。</span></span><br><span class="line">                &#123;</span><br><span class="line">                    p[px] = py;</span><br><span class="line">                    d[px] = d[y] - d[x];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//捕食语句</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//根节点相同时，若 (d[x] - d[y] - 1) % 3 != 0，说明 x 不吃 y，语句冲突</span></span><br><span class="line">                <span class="keyword">if</span> (px == py &amp;&amp; (d[x] - d[y] - <span class="number">1</span>) % <span class="number">3</span>) res++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (px != py)  <span class="comment">//根节点不同时，设置 d[px] 使合并后 x 吃 y 的关系成立。</span></span><br><span class="line">                &#123;</span><br><span class="line">                    p[px] = py;</span><br><span class="line">                    d[px] = d[y] + <span class="number">1</span> - d[x];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第三讲-搜索与图论"><a href="#第三讲-搜索与图论" class="headerlink" title="第三讲_搜索与图论"></a>第三讲_搜索与图论</h1><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><h3 id="排列数字组合"><a href="#排列数字组合" class="headerlink" title="排列数字组合"></a>排列数字组合</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721212047261.png" alt="image-20250721212047261"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有可能、回溯、连通性、博弈</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> path[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 递归终止条件：已填满 n 个位置</span></span><br><span class="line"><span class="keyword">if</span> (u == n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 输出当前排列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, path[i]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试为第 u 个位置填入 1~n 中未使用的数字</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!st[i])<span class="comment">// 若数字 i 未被使用</span></span><br><span class="line">&#123;</span><br><span class="line">path[u] = i;<span class="comment">// 第 u 个位置填入 i</span></span><br><span class="line">st[i] = <span class="literal">true</span>;<span class="comment">// 标记 i 为已使用</span></span><br><span class="line"><span class="built_in">dfs</span>(u + <span class="number">1</span>);<span class="comment">// 递归处理下一个位置（u+1）</span></span><br><span class="line">st[i] = <span class="literal">false</span>;<span class="comment">// 回溯：撤销标记，尝试其他数字</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250722094145129.png" alt="image-20250722094145129"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> col[N];<span class="comment">// 记录每一列是否已经被占用</span></span><br><span class="line"><span class="type">bool</span> dg[N * <span class="number">2</span>];<span class="comment">// 正对角线的特点是行和列的和固定，以 u+i 作为 dg 的索引</span></span><br><span class="line"><span class="type">bool</span> udg[N * <span class="number">2</span>];<span class="comment">// 反对角线的特点是行和列的差固定，以 n-u+i 作为 udg 的索引（确保为正）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 终止条件：遍历完所有行</span></span><br><span class="line">    <span class="keyword">if</span> (u == n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">puts</span>(g[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历当前行 u 的每一列 i，尝试放置皇后</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="comment">// 检查列、正对角线、反对角线是否冲突</span></span><br><span class="line">        <span class="keyword">if</span> (!col[i] &amp;&amp; !dg[u + i] &amp;&amp; !udg[n - u + i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 放置皇后</span></span><br><span class="line">            g[u][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            <span class="comment">// 标记冲突（列、对角线被占用）</span></span><br><span class="line">            col[i] = dg[u + i] = udg[n - u + i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 递归处理下一行</span></span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 回溯：撤销标记和皇后</span></span><br><span class="line">            col[i] = dg[u + i] = udg[n - u + i] = <span class="literal">false</span>;</span><br><span class="line">            g[u][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            g[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721212926282.png" alt="image-20250721212926282"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BFS天生适合**无权图的最短路径问题**</span></span><br><span class="line"><span class="comment">// 最短、最少、层级、扩散</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> g[N][N];    <span class="comment">// 存储网格</span></span><br><span class="line"><span class="type">int</span> d[N][N];    <span class="comment">// 存储到各点的最短距离</span></span><br><span class="line"><span class="comment">// 四个方向：上、右、下、左</span></span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;PII&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="keyword">sizeof</span> d);    <span class="comment">// 初始化距离为-1（未访问）</span></span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;        <span class="comment">// 起点距离为0</span></span><br><span class="line">    q.<span class="built_in">push</span>(&#123; <span class="number">0</span>, <span class="number">0</span> &#125;);   <span class="comment">// 起点入队</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>(); <span class="comment">// 取队头元素</span></span><br><span class="line">        q.<span class="built_in">pop</span>();            <span class="comment">// 队头出队</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) <span class="comment">// 遍历四个方向</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = t.first + dx[i];    <span class="comment">// 新x坐标</span></span><br><span class="line">            <span class="type">int</span> y = t.second + dy[i];   <span class="comment">// 新y坐标</span></span><br><span class="line">            <span class="comment">//检查：</span></span><br><span class="line">            <span class="comment">//1. 坐标是否在网格范围内</span></span><br><span class="line">            <span class="comment">//2. 该位置可通行</span></span><br><span class="line">            <span class="comment">//3. 该位置未访问过</span></span><br><span class="line">            <span class="keyword">if</span> (x &gt;= <span class="number">0</span>&amp;&amp;x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m &amp;&amp; g[x][y] == <span class="number">0</span> &amp;&amp; d[x][y] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                d[x][y] = d[t.first][t.second] + <span class="number">1</span>; <span class="comment">// 更新距离</span></span><br><span class="line">                q.<span class="built_in">push</span>(&#123; x, y &#125;);                   <span class="comment">// 新坐标入队</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d[n - <span class="number">1</span>][m - <span class="number">1</span>]; <span class="comment">// 返回终点距离</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            cin &gt;&gt; g[i][j];</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">bfs</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721215635947.png" alt="image-20250721215635947"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="comment">// 邻接表存储树</span></span><br><span class="line"><span class="type">int</span> h[N];   <span class="comment">//存储表头</span></span><br><span class="line"><span class="type">int</span> e[N];   <span class="comment">//存储节点编号</span></span><br><span class="line"><span class="type">int</span> ne[N];  <span class="comment">//存储下一条边的索引</span></span><br><span class="line"><span class="type">int</span> idx;    <span class="comment">//分配边的索引</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> d[N];   <span class="comment">// 存储每个节点的入度</span></span><br><span class="line"><span class="type">int</span> q[N];   <span class="comment">// 队列，用于BFS实现拓扑排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b;     <span class="comment">// 记录节点编号</span></span><br><span class="line">    ne[idx] = h[a]; <span class="comment">// 指向前一条边的索引</span></span><br><span class="line">    h[a] = idx++;   <span class="comment">// 更新表头为当前边索引，idx自增</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 初始化队列，将所有入度为0的节点入队</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!d[i])</span><br><span class="line">            q[++tt] = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// BFS处理队列中的节点</span></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 取出队头节点</span></span><br><span class="line">        <span class="type">int</span> t = q[hh++];</span><br><span class="line">        <span class="comment">// 遍历t的所有邻居节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="comment">// 减少邻居节点的入度，若变为0则入队</span></span><br><span class="line">            <span class="keyword">if</span> (--d[j] == <span class="number">0</span>)</span><br><span class="line">                q[++tt] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若队列中的节点数等于n，说明存在拓扑排序</span></span><br><span class="line">    <span class="keyword">return</span> tt == n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读入边，构建图并统计入度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a, b);</span><br><span class="line"></span><br><span class="line">        d[b]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">topsort</span>()) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721220133898.png" alt="image-20250721220133898"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">// Dijkstra: 非负权图(城市道路导航)，单源最短路径, 时间复杂度 O(n²) （n 为顶点）</span></span><br><span class="line"><span class="comment">// Bellman-Ford:正负权图（金融利率模型），单源最短路径，时间复杂度 O(n * m) （n 为顶点，m 为边）</span></span><br><span class="line"><span class="comment">// SPFA：负权图（无负环），单源最短路径, 时间复杂度平均情况：O(m)，但最坏情况仍为 O(n * m) （n 为顶点，m 为边）</span></span><br><span class="line"><span class="comment">// Floyd：任意两点最短路径，时间复杂度 O(n³) （n 为顶点）</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> g[N][N];    <span class="comment">// 邻接矩阵存储图</span></span><br><span class="line"><span class="type">int</span> dist[N];    <span class="comment">// 存储各节点到起点的最短距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 标记节点是否已确定最短路径</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化距离数组为无穷大，起点距离为0</span></span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    <span class="comment">//起点为 1 号点，故先给起点距离设为 0</span></span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代n-1次，每次确定一个节点的最短路径</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 找到未确定最短路径的节点中距离最小的节点t</span></span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用节点t更新其所有邻居的距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j], dist[t] + g[t][j]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 标记节点t为已确定</span></span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若终点的距离仍为无穷大，说明无法到达</span></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化各边权为无穷大</span></span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        <span class="comment">//对于可能出现重边和自环，取最小的边权</span></span><br><span class="line">        g[a][b] = <span class="built_in">min</span>(g[a][b], c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">dijkstra</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h2><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721220407812.png" alt="image-20250721220407812"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, Q;    <span class="comment">// n为节点数，m为边数，Q为查询次数</span></span><br><span class="line"><span class="type">int</span> d[N][N];    <span class="comment">// 邻接矩阵</span></span><br><span class="line"><span class="type">int</span> p[N][N];    <span class="comment">// 存储路径的中间节点，</span></span><br><span class="line">                <span class="comment">// p[i][j] 表示i到j的最短路径中j的前驱节点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//外层循环枚举中间点 k，内层两层循环枚举所有点对 (i, j)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                <span class="keyword">if</span> (d[i][j] &gt; d[i][k] + d[k][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//注意可能存在被负权边 “松弛” 后的 INF - k</span></span><br><span class="line">                    d[i][j] = d[i][k] + d[k][j];</span><br><span class="line">                    <span class="comment">//记录插点（前驱节点编号）</span></span><br><span class="line">                    p[i][j] = k; </span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">path</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[i][j] == <span class="number">0</span>) <span class="keyword">return</span>;   <span class="comment">// 没有前驱节点，递归结束（节点编号默认从 1 开始）</span></span><br><span class="line">    <span class="type">int</span> k = p[i][j];</span><br><span class="line">    <span class="built_in">path</span>(i, k);                 <span class="comment">// 输出 i 到 k 的路径</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, k);           <span class="comment">// 输出前驱节点 k</span></span><br><span class="line">    <span class="built_in">path</span>(k, j);                 <span class="comment">// 输出 k 到 j 的路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;Q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span> (i == j) d[i][j] = <span class="number">0</span>;    <span class="comment">// 自己到自己的距离为0 </span></span><br><span class="line">            <span class="keyword">else</span> d[i][j] = INF;         <span class="comment">// 初始化为无穷大</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读入边，处理重边（保留最小边权）</span></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        d[a][b] = <span class="built_in">min</span>(d[a][b], c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">floyd</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (Q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> t = d[a][b];</span><br><span class="line">        <span class="comment">//将 INF / 2 视作阈值防止负权边 “松弛”</span></span><br><span class="line">        <span class="keyword">if</span> (t &gt; INF / <span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 输出最短距离</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, t);</span><br><span class="line">            <span class="comment">// 输出路径</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Path: %d &quot;</span>, a);</span><br><span class="line">            <span class="built_in">path</span>(a, b);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Prim（选点）"><a href="#Prim（选点）" class="headerlink" title="Prim（选点）"></a>Prim（选点）</h2><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721220638001.png" alt="image-20250721220638001"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> g[N][N];    <span class="comment">// 邻接矩阵存储图</span></span><br><span class="line"><span class="type">int</span> dist[N];    <span class="comment">// 记录各顶点到当前生成树（集合）的最短距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 标记顶点是否已加入生成树</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化距离数组为无穷大</span></span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储最小生成树的总权值</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 步骤 1：筛选距离当前生成树最近的未加入顶点 t</span></span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤 2：判断图是否连通，若中间过程无法找到 t 且非初始轮次，说明无法构成最小生成树</span></span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; dist[t] == INF) <span class="keyword">return</span> INF;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤 3：更新最小生成树总权值，标记 t 为已加入</span></span><br><span class="line">        <span class="keyword">if</span> (i) res += dist[t];</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤 4：用新加入的顶点 t 更新其他顶点到生成树的距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) dist[j] = <span class="built_in">min</span>(dist[j], g[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化邻接矩阵为无穷大</span></span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        g[a][b] = g[b][a] = <span class="built_in">min</span>(g[a][b], c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">prim</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t == INF) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><hr><h2 id="Kruskal（选边）"><a href="#Kruskal（选边）" class="headerlink" title="Kruskal（选边）"></a>Kruskal（选边）</h2><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721220840136.png" alt="image-20250721220840136"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = <span class="number">200010</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line">&#125;edges[M];</span><br><span class="line"></span><br><span class="line"><span class="comment">//查</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//返回 x 的祖宗节点 + 路径压缩</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] == x)<span class="comment">//如果递归到根节点则返回</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> p[x] = <span class="built_in">find</span>(p[x]);   <span class="comment">//递归回溯时将路径上的每个节点都指向跟节点（路径压缩）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">struct</span> Edge A, <span class="keyword">struct</span> Edge B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.w &lt; B.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(edges, edges + m, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[i] = i;    <span class="comment">// 初始化并查集</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class="line"></span><br><span class="line">        a = <span class="built_in">find</span>(a), b = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (a != b)</span><br><span class="line">        &#123;</span><br><span class="line">            p[a] = b;</span><br><span class="line">            res += w;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;w);</span><br><span class="line">        edges[i] = &#123; a, b, w &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">kruskal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t == INF) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><h3 id="染色法判定二分图"><a href="#染色法判定二分图" class="headerlink" title="染色法判定二分图"></a>染色法判定二分图</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721221208850.png" alt="image-20250721221208850"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, M = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="comment">// 邻接表存储树</span></span><br><span class="line"><span class="type">int</span> h[N];   <span class="comment">//存储表头</span></span><br><span class="line"><span class="type">int</span> e[M];   <span class="comment">//存储节点编号</span></span><br><span class="line"><span class="type">int</span> ne[M];  <span class="comment">//存储下一条边的索引</span></span><br><span class="line"><span class="type">int</span> idx;    <span class="comment">//分配边的索引</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> color[N];<span class="comment">// 存储每个顶点的颜色，0表示未着色，1和2表示两种不同颜色</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b;     <span class="comment">// 记录节点编号</span></span><br><span class="line">    ne[idx] = h[a]; <span class="comment">// 指向前一条边的索引</span></span><br><span class="line">    h[a] = idx++;   <span class="comment">// 更新表头为当前边索引，idx自增</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 着色当前顶点</span></span><br><span class="line">    color[u] = c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取邻接顶点编号</span></span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="comment">// 如果邻接顶点未着色</span></span><br><span class="line">        <span class="keyword">if</span> (!color[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 递归着色为相反颜色</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(j, <span class="number">3</span> - c)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (color[j] == c) <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">// 如果邻接顶点已着色且颜色相同，返回冲突</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化邻接表头为-1，表示空链表</span></span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a, b), <span class="built_in">add</span>(b, a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记是否为二分图</span></span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 遍历所有顶点，处理未着色的连通分量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!color[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 从顶点i开始DFS，初始颜色为1</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(i, <span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 发现冲突，不是二分图</span></span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分图最大匹配"><a href="#二分图最大匹配" class="headerlink" title="二分图最大匹配"></a>二分图最大匹配</h3><p><img src="/%E5%B8%B8%E7%94%A8%E6%A8%A1%E6%9D%BF.assets/image-20250721221507189.png" alt="image-20250721221507189"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>, M = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n1, n2, m;</span><br><span class="line"><span class="comment">// 邻接表存储树</span></span><br><span class="line"><span class="type">int</span> h[N];   <span class="comment">//存储表头</span></span><br><span class="line"><span class="type">int</span> e[M];   <span class="comment">//存储节点编号</span></span><br><span class="line"><span class="type">int</span> ne[M];  <span class="comment">//存储下一条边的索引</span></span><br><span class="line"><span class="type">int</span> idx;    <span class="comment">//分配边的索引</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> match[N];   <span class="comment">//记录右部节点的匹配对象（值为左部节点编号，0 表示未匹配）</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">//标记右部节点是否被访问  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b;     <span class="comment">// 记录节点编号</span></span><br><span class="line">    ne[idx] = h[a]; <span class="comment">// 指向前一条边的索引</span></span><br><span class="line">    h[a] = idx++;   <span class="comment">// 更新表头为当前边索引，idx自增</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 遍历左部节点 x 的所有邻接右部节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[x]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 右部节点 j</span></span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="comment">// 右部节点 j 未被访问</span></span><br><span class="line">        <span class="keyword">if</span> (!st[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 标记为已访问</span></span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 若 j 未匹配，或 j 的原匹配节点可找到新匹配</span></span><br><span class="line">            <span class="keyword">if</span> (match[j] == <span class="number">0</span> || <span class="built_in">find</span>(match[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 更新匹配关系</span></span><br><span class="line">                match[j] = x;</span><br><span class="line">                <span class="comment">// 找到增广路径</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 未找到增广路径</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n1, &amp;n2, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">add</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最大匹配数</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 重置访问标记</span></span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">        <span class="comment">// 找到增广路径则匹配数加 1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(i)) res++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h2><h3 id="试除法"><a href="#试除法" class="headerlink" title="试除法"></a>试除法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i++)</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_prime</span>(x)) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">// 质因数：一个数分解成质数相乘的形式时，这些质数就是该数的质因数</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i++)</span><br><span class="line">        <span class="comment">// 检查i是否是x的质因数</span></span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 统计该质因数的指数</span></span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i, s++;</span><br><span class="line">            <span class="comment">// 输出质因数及其指数</span></span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 如果x仍大于1，说明x本身是一个质数</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="built_in">divide</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="筛质数-埃及筛"><a href="#筛质数-埃及筛" class="headerlink" title="筛质数_埃及筛"></a>筛质数_埃及筛</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">// 核心逻辑：如果 i 是质数，将其所有倍数标记为合数。</span></span><br><span class="line"><span class="comment">// 缺点：可能重复标记同一个合数（如 12 会被 2 和 3 分别标记）。</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[N], cnt; <span class="comment">// 存储所有质数</span></span><br><span class="line"><span class="type">bool</span> st[N];         <span class="comment">// 标记数组，true表示合数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求出1~n中质数的个数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果是合数直接跳过</span></span><br><span class="line">        <span class="keyword">if</span> (st[i]) <span class="keyword">continue</span>;</span><br><span class="line">        primes[cnt++] = i;</span><br><span class="line">        <span class="comment">// 标记i的所有倍数为合数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + i; j &lt;= n; j += i)</span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">get_primes</span>(n);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="筛质数-线性筛（最优）"><a href="#筛质数-线性筛（最优）" class="headerlink" title="筛质数_线性筛（最优）"></a>筛质数_线性筛（最优）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[N], cnt; <span class="comment">// 存储所有质数及其数量</span></span><br><span class="line"><span class="type">bool</span> st[N];         <span class="comment">// 标记数组，st[i] 为 true 表示 i 是合数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求出1~n中质数的个数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 若 i 未被标记，i 是质数</span></span><br><span class="line">        <span class="keyword">if</span> (!st[i]) primes[cnt++] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 标记 primes[j] * i 为合数</span></span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 关键优化：确保每个合数只被最小质因数筛除</span></span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">get_primes</span>(n);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="约数"><a href="#约数" class="headerlink" title="约数"></a>约数</h2><h3 id="试除法-1"><a href="#试除法-1" class="headerlink" title="试除法"></a>试除法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">// 约数 = 因数 跟倍数配对，质数 = 素数 跟合数配对</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">get_divisors</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x / i; i++)</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="comment">// 避免重复添加相同的约数</span></span><br><span class="line">            <span class="keyword">if</span> (i != x / i) res.<span class="built_in">push_back</span>(x / i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 将约数按升序排列</span></span><br><span class="line">    <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">auto</span> res = <span class="built_in">get_divisors</span>(x);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : res) cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计约数个数"><a href="#统计约数个数" class="headerlink" title="统计约数个数"></a>统计约数个数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">// 约数个数定理： 360 = 2^3 * 3^2 * 5^1</span></span><br><span class="line"><span class="comment">// cnt = (a1 + 1)*(a2 + 1)*...*(ak + 1) 其中(a是各约数的指数)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; primes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i++)</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x /= i;</span><br><span class="line">                <span class="comment">// 记录约数 i 的个数</span></span><br><span class="line">                primes[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// 最后可能还剩个比较大的因数 如 14 = 2 * 7</span></span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">1</span>) primes[x]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : primes) res = res * (p.second + <span class="number">1</span>) % mod;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计约数之和"><a href="#统计约数之和" class="headerlink" title="统计约数之和"></a>统计约数之和</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">// 约数和定理： 360 = 2^3 * 3^2 * 5^1</span></span><br><span class="line"><span class="comment">// sum = (p1^0 + p1^1 + ... + p1^a1)*...*(pk^0 + pk^1 + ... + pk^ak) </span></span><br><span class="line"><span class="comment">// 其中(p是各质因数，a是各约数的指数)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; primes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="comment">// 分解x的质因数，累加到primes中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i++)</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x /= i;</span><br><span class="line">                primes[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// 剩余的x是质因数</span></span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">1</span>) primes[x]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p : primes)</span><br><span class="line">    &#123;</span><br><span class="line">        LL a = p.first;     <span class="comment">// 质因数p</span></span><br><span class="line">        LL b = p.second;    <span class="comment">// 总次数b</span></span><br><span class="line">        </span><br><span class="line">        LL t = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 求等比数列和</span></span><br><span class="line">        <span class="keyword">while</span> (b--) t = (t * a + <span class="number">1</span>) % mod;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 累乘所有等比数列和</span></span><br><span class="line">        res = res * t % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GCD和LCM"><a href="#GCD和LCM" class="headerlink" title="GCD和LCM"></a>GCD和LCM</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算GCD（Greatest Common Divisor）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算LCM（Lowest Common Multiple）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a / <span class="built_in">gcd</span>(a, b) * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">gcd</span>(a, b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="comment">// 应用:求逆元</span></span><br><span class="line"><span class="comment">// 费马小定理： 假如 a 是一个整数，p 是一个质数那么</span></span><br><span class="line"><span class="comment">// 1. 如果 a 是 p 的倍数， a^p = a (mod p)  (其中 = 表示同余符号)</span></span><br><span class="line"><span class="comment">// 2. 如果 a 不是 p 的倍数，a^（p - 1） = 1 (mod p)  </span></span><br><span class="line"><span class="comment">//                          =&gt;   a * a^(p - 2) = 1 (mod p)  </span></span><br><span class="line"><span class="comment">//                          =&gt;   (a % p) * (a^(p - 2) % p) = 1 % p  </span></span><br><span class="line"><span class="comment">//                          其中 a^(p - 2) 是 a 的逆元</span></span><br><span class="line"><span class="comment">// 乘法逆元：如果 a * x = 1 ( mod p ),则称 x 和 a 互为乘法逆元</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速计算 a^b mod p （二进制转十进制）</span></span><br><span class="line"><span class="function">LL <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化结果，处理 p=1 的情况</span></span><br><span class="line">    LL res = <span class="number">1</span> % p;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % p;   <span class="comment">// 当前位为 1 时，累乘 a 的当前幂次</span></span><br><span class="line">        a = a * (LL)a % p;              <span class="comment">// a 自乘，更新为 a^&#123;2^k&#125;</span></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;                        <span class="comment">// 右移一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, p;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;p);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">qmi</span>(a, b, p));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="STL学习"><a href="#STL学习" class="headerlink" title="STL学习"></a>STL学习</h1><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 定义与初始化</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v1;                    <span class="comment">// 空vector</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v2</span><span class="params">(<span class="number">5</span>, <span class="number">10</span>)</span></span>;             <span class="comment">// 包含5个10的vector</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v3 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;     <span class="comment">// 初始化列表</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v4</span><span class="params">(v<span class="number">3.</span>begin(), v<span class="number">3.</span>end())</span></span>;  <span class="comment">// 用迭代器范围初始化</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v5</span><span class="params">(v3)</span></span>;                <span class="comment">// 拷贝构造</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 元素操作</span></span><br><span class="line">    v<span class="number">1.</span><span class="built_in">push_back</span>(<span class="number">100</span>);                 <span class="comment">// 尾部插入元素</span></span><br><span class="line">    v<span class="number">1.</span><span class="built_in">emplace_back</span>(<span class="number">200</span>);              <span class="comment">// C++11: 直接构造元素（效率更高）</span></span><br><span class="line">    v<span class="number">1.</span><span class="built_in">pop_back</span>();                     <span class="comment">// 尾部删除元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 访问元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;第一个元素: &quot;</span> &lt;&lt; v3[<span class="number">0</span>] &lt;&lt; endl;    <span class="comment">// 无边界检查</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;第二个元素: &quot;</span> &lt;&lt; v<span class="number">3.</span><span class="built_in">at</span>(<span class="number">1</span>) &lt;&lt; endl;  <span class="comment">// 有边界检查（越界抛异常）</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最后一个元素: &quot;</span> &lt;&lt; v<span class="number">3.</span><span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 修改元素</span></span><br><span class="line">    v3[<span class="number">2</span>] = <span class="number">300</span>;                       <span class="comment">// 修改指定位置元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 插入与删除</span></span><br><span class="line">    v<span class="number">3.</span><span class="built_in">insert</span>(v<span class="number">3.</span><span class="built_in">begin</span>() + <span class="number">1</span>, <span class="number">200</span>);    <span class="comment">// 在位置1插入200</span></span><br><span class="line">    v<span class="number">3.</span><span class="built_in">erase</span>(v<span class="number">3.</span><span class="built_in">begin</span>() + <span class="number">2</span>);          <span class="comment">// 删除位置2的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 遍历元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历v3: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v<span class="number">3.</span><span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">    cout &lt;&lt; v<span class="number">3.</span><span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出 1 2 3 </span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 容量与大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v3大小: &quot;</span> &lt;&lt; v<span class="number">3.</span><span class="built_in">size</span>() &lt;&lt; endl;        <span class="comment">// 实际元素数量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v3容量: &quot;</span> &lt;&lt; v<span class="number">3.</span><span class="built_in">capacity</span>() &lt;&lt; endl;    <span class="comment">// 已分配内存大小</span></span><br><span class="line">    v<span class="number">3.</span><span class="built_in">resize</span>(<span class="number">10</span>);                     <span class="comment">// 调整大小（不足则补默认值）</span></span><br><span class="line">    v<span class="number">3.</span><span class="built_in">reserve</span>(<span class="number">20</span>);                    <span class="comment">// 预分配容量，避免频繁扩容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. 二维数组（动态矩阵）</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">matrix</span>(<span class="number">3</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">4</span>, <span class="number">0</span>));  <span class="comment">// 3行4列（可只定义行数）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问二维数组</span></span><br><span class="line">    matrix[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">100</span>;                <span class="comment">// 修改第2行第3列元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历二维数组</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历二维数组:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; row : matrix) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : row) &#123;</span><br><span class="line">            cout &lt;&lt; x &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9. 二维数组的动态调整</span></span><br><span class="line">    matrix.<span class="built_in">push_back</span>(&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;);    <span class="comment">// 添加一行</span></span><br><span class="line">    matrix[<span class="number">0</span>].<span class="built_in">resize</span>(<span class="number">5</span>, <span class="number">0</span>);            <span class="comment">// 第一行扩展为5列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10. 清空与释放内存</span></span><br><span class="line">    v<span class="number">3.</span><span class="built_in">clear</span>();                        <span class="comment">// 清空元素，但保留容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 定义与初始化</span></span><br><span class="line">    string s1;                  <span class="comment">// 空字符串</span></span><br><span class="line">    string s2 = <span class="string">&quot;hello&quot;</span>;        <span class="comment">// 直接初始化</span></span><br><span class="line">    <span class="function">string <span class="title">s3</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;         <span class="comment">// 构造函数初始化</span></span><br><span class="line">    string s4 = s2 + <span class="string">&quot; &quot;</span> + s3;  <span class="comment">// 拼接字符串: &quot;hello world&quot;</span></span><br><span class="line">    <span class="function">string <span class="title">s5</span><span class="params">(<span class="number">5</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;          <span class="comment">// 重复字符: &quot;aaaaa&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 访问与修改</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2的第1个字符: &quot;</span> &lt;&lt; s2[<span class="number">0</span>] &lt;&lt; endl;      <span class="comment">// 输出: h</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2的第2个字符: &quot;</span> &lt;&lt; s<span class="number">2.</span><span class="built_in">at</span>(<span class="number">1</span>) &lt;&lt; endl;    <span class="comment">// 输出: e</span></span><br><span class="line">    s2[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>;     <span class="comment">// 修改字符: &quot;Hello&quot;</span></span><br><span class="line">    s<span class="number">2.</span><span class="built_in">append</span>(<span class="string">&quot; world&quot;</span>);    <span class="comment">// 追加: &quot;Hello world&quot;</span></span><br><span class="line">    s2 += <span class="string">&quot;!&quot;</span>;              <span class="comment">// 追加: &quot;Hello world!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 长度与容量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2长度: &quot;</span> &lt;&lt; s<span class="number">2.l</span>ength() &lt;&lt; endl;      <span class="comment">// 输出: 12</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2容量: &quot;</span> &lt;&lt; s<span class="number">2.</span><span class="built_in">capacity</span>() &lt;&lt; endl;    <span class="comment">// 输出: 至少12（可能更大）</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2是否为空: &quot;</span> &lt;&lt; (s<span class="number">2.</span><span class="built_in">empty</span>() ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>) &lt;&lt; endl;  <span class="comment">// 输出: 否</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 查找与替换</span></span><br><span class="line">    <span class="type">size_t</span> pos = s<span class="number">2.f</span>ind(<span class="string">&quot;world&quot;</span>);      <span class="comment">// 查找子串，返回位置: 6</span></span><br><span class="line">    <span class="keyword">if</span> (pos != string::npos) &#123;          <span class="comment">// 判断是否找到</span></span><br><span class="line">        s<span class="number">2.</span><span class="built_in">replace</span>(pos, <span class="number">5</span>, <span class="string">&quot;universe&quot;</span>); <span class="comment">// 替换: &quot;Hello universe!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 子串与截取</span></span><br><span class="line">    string sub = s<span class="number">2.</span><span class="built_in">substr</span>(<span class="number">6</span>, <span class="number">8</span>);        <span class="comment">// 从位置6开始截取8个字符: &quot;universe&quot;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;截取子串: &quot;</span> &lt;&lt; sub &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 比较</span></span><br><span class="line">    string s6 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (s6 == s<span class="number">2.</span><span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">5</span>)) &#123;         <span class="comment">// 比较子串</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;前缀相同&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用compare函数（0表示相等，负数表示小于，正数表示大于）</span></span><br><span class="line">    cout &lt;&lt; s<span class="number">6.</span><span class="built_in">compare</span>(s2) &lt;&lt; endl;  <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 插入与删除</span></span><br><span class="line">    s<span class="number">2.</span><span class="built_in">insert</span>(<span class="number">5</span>, <span class="string">&quot;,&quot;</span>);    <span class="comment">// 在位置5插入逗号: &quot;Hello, universe!&quot;</span></span><br><span class="line">    s<span class="number">2.</span><span class="built_in">erase</span>(<span class="number">5</span>, <span class="number">1</span>);       <span class="comment">// 删除位置5的字符: &quot;Hello universe!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. C风格字符串转换</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* c_str = s<span class="number">2.</span><span class="built_in">c_str</span>();                 <span class="comment">// 转换为const char*</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;C风格字符串: &quot;</span> &lt;&lt; c_str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9. 遍历字符串</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历s2: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s2) &#123;      <span class="comment">// C++11范围for循环</span></span><br><span class="line">        cout &lt;&lt; c;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10. 数值转换（C++11）</span></span><br><span class="line">    string num_str = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">    <span class="type">int</span> num = <span class="built_in">stoi</span>(num_str);                       <span class="comment">// 字符串转整数</span></span><br><span class="line">    string back_to_str = <span class="built_in">to_string</span>(num + <span class="number">5</span>);       <span class="comment">// 整数转字符串</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数值转换: &quot;</span> &lt;&lt; back_to_str &lt;&lt; endl;    <span class="comment">// 输出: 12350</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 定义与初始化</span></span><br><span class="line">    unordered_map&lt;string, <span class="type">int</span>&gt; map;  <span class="comment">// 键为string，值为int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 插入元素</span></span><br><span class="line">    map[<span class="string">&quot;apple&quot;</span>] = <span class="number">10</span>;              <span class="comment">// 下标操作插入</span></span><br><span class="line">    map.<span class="built_in">insert</span>(&#123; <span class="string">&quot;banana&quot;</span>, <span class="number">20</span> &#125;);     <span class="comment">// insert()插入</span></span><br><span class="line">    map.<span class="built_in">emplace</span>(<span class="string">&quot;cherry&quot;</span>, <span class="number">30</span>);      <span class="comment">// emplace()直接构造</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 访问元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;apple的数量: &quot;</span> &lt;&lt; map[<span class="string">&quot;apple&quot;</span>] &lt;&lt; endl;  <span class="comment">// 下标访问（键不存在会插入默认值）</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;banana的数量: &quot;</span> &lt;&lt; map.<span class="built_in">at</span>(<span class="string">&quot;banana&quot;</span>) &lt;&lt; endl;  <span class="comment">// at()访问（键不存在抛异常）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 判断键是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (map.<span class="built_in">count</span>(<span class="string">&quot;cherry&quot;</span>) &gt; <span class="number">0</span>) &#123;  <span class="comment">// count()返回0或1</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;找到cherry!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> it = map.<span class="built_in">find</span>(<span class="string">&quot;cherry&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (it != map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Cherry: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 修改元素</span></span><br><span class="line">    map[<span class="string">&quot;apple&quot;</span>] += <span class="number">5</span>;             <span class="comment">// 修改已存在的键值</span></span><br><span class="line">    map[<span class="string">&quot;durian&quot;</span>] = <span class="number">5</span>;             <span class="comment">// 插入新键值对</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 删除元素</span></span><br><span class="line">    map.<span class="built_in">erase</span>(<span class="string">&quot;banana&quot;</span>);           <span class="comment">// 按键删除</span></span><br><span class="line">    map.<span class="built_in">erase</span>(map.<span class="built_in">find</span>(<span class="string">&quot;cherry&quot;</span>)); <span class="comment">// 按迭代器删除</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 遍历元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历map:&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = map.<span class="built_in">begin</span>(); it != map.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. 统计与容量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;map大小: &quot;</span> &lt;&lt; map.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map.clear();</span></span><br><span class="line">    <span class="comment">//map.empty()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入元素</span></span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">2</span>);  <span class="comment">// 重复元素，自动忽略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历（有序输出）</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Elements in set: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : s) &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出：1 2 3</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找元素</span></span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="number">2</span>) != s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2 found!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    s.<span class="built_in">erase</span>(<span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After erase 2: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : s) &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 输出：1 3</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计元素个数</span></span><br><span class="line">    <span class="type">int</span> size = s.<span class="built_in">size</span>();  <span class="comment">// 返回元素数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空set</span></span><br><span class="line">    s.<span class="built_in">clear</span>();  <span class="comment">// s变为空集</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找第一个大于等于x的元素（lower_bound）</span></span><br><span class="line">    <span class="keyword">auto</span> it = s.<span class="built_in">lower_bound</span>(<span class="number">2</span>);  <span class="comment">// 若存在&gt;=2的元素，返回迭代器；否则返回s.end()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找第一个大于x的元素（upper_bound）</span></span><br><span class="line">    <span class="keyword">auto</span> it = s.<span class="built_in">upper_bound</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 定义栈（默认基于deque）</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 入栈操作</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">10</span>);     <span class="comment">// 栈顶: 10，栈内容: [10]</span></span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">20</span>);     <span class="comment">// 栈顶: 20，栈内容: [10, 20]</span></span><br><span class="line">    s.<span class="built_in">emplace</span>(<span class="number">30</span>);  <span class="comment">// C++11: 直接构造元素，栈内容: [10, 20, 30]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 访问栈顶元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;栈顶元素: &quot;</span> &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; endl;  <span class="comment">// 输出: 30</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 修改栈顶元素</span></span><br><span class="line">    s.<span class="built_in">top</span>() = <span class="number">300</span>;  <span class="comment">// 栈内容: [10, 20, 300]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 出栈操作</span></span><br><span class="line">    s.<span class="built_in">pop</span>();        <span class="comment">// 移除栈顶元素(300)，栈内容: [10, 20]</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;出栈后栈顶元素: &quot;</span> &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; endl;  <span class="comment">// 输出: 20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 判断栈状态</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;栈是否为空: &quot;</span> &lt;&lt; (s.<span class="built_in">empty</span>() ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>) &lt;&lt; endl;  <span class="comment">// 输出: 否</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;栈大小: &quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;                        <span class="comment">// 输出: 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 遍历栈（只能逐个出栈）</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历栈: &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 访问栈顶元素</span></span><br><span class="line">        s.<span class="built_in">pop</span>();                 <span class="comment">// 移除栈顶元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;  <span class="comment">// 输出: 20 10（注意顺序：后进先出）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 定义队列（默认基于deque）</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 入队操作</span></span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">10</span>);      <span class="comment">// 队尾插入元素10</span></span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">20</span>);      <span class="comment">// 队尾插入元素20</span></span><br><span class="line">    q.<span class="built_in">emplace</span>(<span class="number">30</span>);   <span class="comment">// C++11: 直接构造元素30</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 访问队首和队尾元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;队首元素: &quot;</span> &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; endl;  <span class="comment">// 输出: 10</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;队尾元素: &quot;</span> &lt;&lt; q.<span class="built_in">back</span>() &lt;&lt; endl;   <span class="comment">// 输出: 30</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 修改队首和队尾元素</span></span><br><span class="line">    q.<span class="built_in">front</span>() = <span class="number">100</span>;  <span class="comment">// 队首元素变为100</span></span><br><span class="line">    q.<span class="built_in">back</span>() = <span class="number">300</span>;   <span class="comment">// 队尾元素变为300</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 出队操作</span></span><br><span class="line">    q.<span class="built_in">pop</span>();          <span class="comment">// 移除队首元素(100)</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;出队后队首元素: &quot;</span> &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; endl;  <span class="comment">// 输出: 20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 判断队列状态</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;队列是否为空: &quot;</span> &lt;&lt; (q.<span class="built_in">empty</span>() ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>) &lt;&lt; endl;  <span class="comment">// 输出: 否</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;队列大小: &quot;</span> &lt;&lt; q.<span class="built_in">size</span>() &lt;&lt; endl;                        <span class="comment">// 输出: 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 遍历队列（只能通过出队方式）</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历队列: &quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 访问队首元素</span></span><br><span class="line">        q.<span class="built_in">pop</span>();                   <span class="comment">// 移除队首元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;  <span class="comment">// 输出: 20 300</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luogu_P1433</title>
      <link href="/undefined/230840d3.html"/>
      <url>/undefined/230840d3.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>有 n 块奶酪，小老鼠从 (0, 0) 点出发，要吃掉所有奶酪，求跑过的最少距离。<br>输入输出：输入为奶酪数量 n 以及每块奶酪的横、纵坐标 xi, yi；输出为保留两位小数的最少跑动距离。</p><p>输入输出样例：<br>输入：</p><blockquote><p>4<br>1 1<br>1 -1<br>-1 1<br>-1 -1</p></blockquote><p>输出：</p><blockquote><p>7.41</p></blockquote><p>详情：<a href="https://www.luogu.com.cn/problem/P1433">luogu_P1433</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p><strong>状态压缩与记忆化搜索：</strong></p><ol><li><p><strong>状态表示</strong>：使用 pos 表示当前所在奶酪的索引，deep 表示已吃奶酪的数量，len 表示已跑过的距离，path 是一个整数，通过位运算（状态压缩）记录已经访问过的奶酪（每一位代表一块奶酪是否被访问 ）。</p></li><li><p><strong>记忆化</strong>：dp[pos][path] 存储从当前状态（在 pos 号奶酪位置、已访问 path 对应奶酪集合 ）出发，吃完剩余奶酪所需的最短距离增量。避免重复计算相同状态，大幅减少递归次数。</p></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要吃掉所有奶酪，求跑过的最少距离</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> n; <span class="comment">// 奶酪数量</span></span><br><span class="line"><span class="comment">// 存储每块奶酪的坐标，a[i][0]为横坐标，a[i][1]为纵坐标</span></span><br><span class="line"><span class="type">double</span> a[N][<span class="number">2</span>];</span><br><span class="line"><span class="comment">// 标记奶酪是否被访问过，用于回溯</span></span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="comment">// 记忆化数组，dp[pos][path]存储对应状态的最短距离增量</span></span><br><span class="line"><span class="comment">// 第 i 位为 1：表示第 i 块奶酪已经被访问过（吃过）。</span></span><br><span class="line"><span class="comment">// 第 i 位为 0：表示第 i 块奶酪未被访问过。</span></span><br><span class="line"><span class="type">double</span> dp[N][<span class="number">1</span> &lt;&lt; <span class="number">16</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// pos：当前所在奶酪的索引</span></span><br><span class="line"><span class="comment">// deep：已吃奶酪数量</span></span><br><span class="line"><span class="comment">// len：已跑过的距离</span></span><br><span class="line"><span class="comment">// path：哪些奶酪被吃</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> deep, <span class="type">double</span> len, <span class="type">int</span> path)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> ans = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 递归终止条件：已吃完所有奶酪，返回已跑距离</span></span><br><span class="line">    <span class="keyword">if</span>(deep == n) <span class="keyword">return</span> len;</span><br><span class="line">    <span class="comment">// 若该状态已计算过，直接返回存储的最短距离</span></span><br><span class="line">    <span class="comment">//（当前已跑距离 + 后续最短增量 ）</span></span><br><span class="line">    <span class="keyword">if</span>(dp[pos][path]) <span class="keyword">return</span> len + dp[pos][path];</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 遍历所有奶酪</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 跳过已访问过的奶酪</span></span><br><span class="line">        <span class="keyword">if</span>(st[i]) <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 标记当前奶酪为已访问</span></span><br><span class="line">        st[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 计算当前奶酪与所在奶酪的欧几里得距离</span></span><br><span class="line">        <span class="type">double</span> r1 = a[i][<span class="number">0</span>] - a[pos][<span class="number">0</span>];</span><br><span class="line">        <span class="type">double</span> r2 = a[i][<span class="number">1</span>] - a[pos][<span class="number">1</span>];</span><br><span class="line">        <span class="type">double</span> r = <span class="built_in">sqrt</span>(r1 * r1 + r2 * r2);</span><br><span class="line">        <span class="comment">// 递归访问下一块奶酪，更新最短距离</span></span><br><span class="line">        <span class="comment">// path | (1 &lt;&lt; i) 将 path 中第 i 位的状态改为 1</span></span><br><span class="line">        ans = <span class="built_in">min</span>(ans, <span class="built_in">dfs</span>(i, deep + <span class="number">1</span>, len + r, path | (<span class="number">1</span> &lt;&lt; i)));</span><br><span class="line">        <span class="comment">// 回溯，取消标记</span></span><br><span class="line">        st[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存储当前状态下，吃完剩余所有奶酪所需的最短距离</span></span><br><span class="line">    dp[pos][path] = ans - len;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i][<span class="number">0</span>] &gt;&gt; a[i][<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>, <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记忆化搜索 状态压缩 dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_15</title>
      <link href="/undefined/76d5ba51.html"/>
      <url>/undefined/76d5ba51.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>英语背了一个小时单词<br><img src="https://pic1.imgdb.cn/item/6876328a58cb8da5c8b37766.png" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_14</title>
      <link href="/undefined/1d28ac7.html"/>
      <url>/undefined/1d28ac7.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>英语背了一个小时单词<br><img src="https://pic1.imgdb.cn/item/6874f4cb58cb8da5c8ad611b.png" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_13</title>
      <link href="/undefined/9fb61f64.html"/>
      <url>/undefined/9fb61f64.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>英语背了一个小时单词<br><img src="https://pic1.imgdb.cn/item/6873879b58cb8da5c8a7c7e9.png" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_12</title>
      <link href="/undefined/e8b12ff2.html"/>
      <url>/undefined/e8b12ff2.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>英语背了一个小时单词<br><img src="https://pic1.imgdb.cn/item/6872421a58cb8da5c8a4c6bb.png" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_11</title>
      <link href="/undefined/71b87e48.html"/>
      <url>/undefined/71b87e48.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>英语背了一个小时单词<br><img src="https://pic1.imgdb.cn/item/68711e5158cb8da5c89d4d9b.png" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cf_246D</title>
      <link href="/undefined/c23154c1.html"/>
      <url>/undefined/c23154c1.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上次集训赛（周三）刷到一个特别有意思的题，关于图论的。当时没刷多少图论的题目，所以图论算法这块一直都挺畏惧的hhh~~，但这个题目让我重新认识到有的图论原来并不难，只是披着羊皮的狼，这个题目我是用 map 映射做的，今天想起才来写个关于它的题解，题目链接放在后面。</p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>本题要求找出图中邻居颜色多样性最大的顶点颜色。具体来说，对于颜色 k，需统计所有属于颜色 k 的顶点的邻居颜色集合的大小（去重），最终输出该值最大的颜色（若有多个，选数值最小的）。</p><p>输入输出样例：<br>输入：</p><blockquote><p>6 6<br>1 1 2 3 5 8<br>1 2<br>3 2<br>1 4<br>4 3<br>4 5<br>4 6</p></blockquote><p>输出：</p><blockquote><p>3</p></blockquote><p>详情：<a href="https://codeforces.com/problemset/problem/246/D">cf_246D</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ol><li><p><strong>输入处理与颜色去重</strong>：用数组 s 存储所有唯一颜色，用数组 flagc 标记颜色是否已存在，确保数组 s 中颜色唯一。</p> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">if</span> (!flagc[c[i]]) <span class="comment">//去重</span></span><br><span class="line">        s[++idx] = c[i], flagc[c[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>统计邻居颜色多样性</strong>：遍历每条边，若边两端顶点颜色不同，用 map&lt;pair&lt;int, int&gt;, bool&gt; 记录颜色对 (c[x], c[y])，避免重复统计。每遇到新的颜色对，对应颜色的多样性计数数组 cntc 加 1</p> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c[x] == c[y]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!flag[&#123;c[x], c[y]&#125;]) cntc[c[x]]++, flag[&#123;c[x], c[y]&#125;] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!flag[&#123;c[y], c[x]&#125;]) cntc[c[y]]++, flag[&#123;c[y], c[x]&#125;] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>寻找最优颜色</strong>：对唯一颜色数组 s 排序，遍历 s，找到 cntc 最大的颜色，若有多个，选排序后第一个出现的。</p> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(s + <span class="number">1</span>, s + <span class="number">1</span> + idx);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> max_cnt = <span class="number">0</span>, ans = s[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= idx; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cntc[s[i]] &gt; max_cnt) &#123;</span><br><span class="line">        <span class="comment">// 找到最大多样性的颜色</span></span><br><span class="line">        max_cnt = cntc[s[i]], ans = s[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="AC代码附上"><a href="#AC代码附上" class="headerlink" title="AC代码附上"></a>AC代码附上</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> c[<span class="number">100010</span>], s[<span class="number">100010</span>], cntc[<span class="number">100010</span>];</span><br><span class="line"><span class="type">bool</span> flagc[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line">map&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">bool</span>&gt; flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; c[i];</span><br><span class="line">        <span class="keyword">if</span> (!flagc[c[i]]) <span class="comment">//去重</span></span><br><span class="line">            s[++idx] = c[i], flagc[c[i]] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c[x] == c[y]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!flag[&#123;c[x], c[y]&#125;]) cntc[c[x]]++, flag[&#123;c[x], c[y]&#125;] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!flag[&#123;c[y], c[x]&#125;]) cntc[c[y]]++, flag[&#123;c[y], c[x]&#125;] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(s + <span class="number">1</span>, s + <span class="number">1</span> + idx);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> max_cnt = <span class="number">0</span>, ans = s[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= idx; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cntc[s[i]] &gt; max_cnt) &#123;</span><br><span class="line">            <span class="comment">// 找到最大多样性的颜色</span></span><br><span class="line">            max_cnt = cntc[s[i]], ans = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_10</title>
      <link href="/undefined/6bf4ede.html"/>
      <url>/undefined/6bf4ede.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>英语背了一个小时单词<br><img src="https://pic1.imgdb.cn/item/686fafa758cb8da5c89a9a8e.png" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_9</title>
      <link href="/undefined/84a3961.html"/>
      <url>/undefined/84a3961.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>校集训侥幸拿了 NO.2 哈哈哈~~<br><img src="https://pic1.imgdb.cn/item/686e645758cb8da5c898e36d.png" alt="25_7_9_暑期集训2" title="25_7_9_暑期集训2"></p><p>英语背了一个小时单词，又总结出一点经验和方法，以后 60 min 稍微记慢点，把每个单词的意思都要看完！！！，过完一轮乱序版后再改用正序版背一遍看哪个效果好<br><img src="https://pic1.imgdb.cn/item/686e645758cb8da5c898e36e.png" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_8</title>
      <link href="/undefined/7f4d09f7.html"/>
      <url>/undefined/7f4d09f7.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天的 60 min 记单词时间很高效，复习 200 词花了10分钟，学习 400 新单词花了 50min，看来只要记单词专注力高就能更高效，背的也就越多hhhh~~~~ 以后更新要求：<strong>一天至少背 60 min &amp;&amp; 学习300新单词</strong>，二者均要达标！！！！<br><img src="https://pic1.imgdb.cn/item/686d0a9858cb8da5c896f046.png" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_7</title>
      <link href="/undefined/eff21466.html"/>
      <url>/undefined/eff21466.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天背单词途中忘记退出应用了，导致时间多算大概 280 min了（不是有意的啊啊啊~~~）所以 +60 min 就到 340 min了，也算打卡了吧（下次注意呜呜呜）<br><img src="https://pic1.imgdb.cn/item/686bb4e358cb8da5c894e8db.png" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_835Trie字典树</title>
      <link href="/undefined/82a00979.html"/>
      <url>/undefined/82a00979.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/686b35ec58cb8da5c892e9ee.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定一个字符串集合，需要支持两种操作（需要高效存储和查找字符串，否则会超时）：</p><ol><li>插入字符串（操作符为 I）</li><li>查询某个字符串出现的次数（操作符为 Q）</li></ol><p>输入输出样例：<br>输入：</p><blockquote><p>5<br>I abc<br>Q abc<br>Q ab<br>I ab<br>Q ab</p></blockquote><p>输出：</p><blockquote><p>1<br>0<br>1</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/837/">ac_835Trie字典树</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>本题使用<strong>Trie 树（字典树）<strong>来高效处理字符串的插入和查询操作。Trie 树的核心思想是利用</strong>字符串的公共前缀</strong>来减少查询时间，从而达到插入和查询的时间复杂度均为 <strong>O (m)</strong>（m 为字符串长度）。</p><ol><li><p><strong>数据结构设计</strong>：可以看下面代码注释</p> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Trie（字典树）: 高效存储和查找字符串集合的数据结构</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>]; <span class="comment">//存储从节点 P 沿着 i 这条边走到的子节点</span></span><br><span class="line"><span class="type">int</span> cnt[N]; <span class="comment">//存储以节点 p 结尾的单词插入次数</span></span><br><span class="line"><span class="type">int</span> idx;    <span class="comment">//给每个节点编号（节点数）</span></span><br><span class="line"><span class="type">char</span> str[N];    <span class="comment">//处理的字符串</span></span><br></pre></td></tr></table></figure></li><li><p><strong>插入操作</strong>：从根节点开始，遍历字符串的每个字符；将字符转换为对应的索引（0~25）；如果当前节点没有对应子节点，创建新节点；遍历结束后，在最后一个节点的 cnt 上加 1，表示该字符串出现次数 + 1。</p> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>; <span class="comment">// 从根节点（编号0）开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;  <span class="comment">// 将字符映射为0-25的索引</span></span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) son[p][u] = ++idx; <span class="comment">// 如果路径不存在，创建新节点</span></span><br><span class="line">        p = son[p][u]; <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p]++; <span class="comment">// 标记字符串结尾，计数器加1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>查询操作</strong>：从根节点开始遍历字符串；如果中途路径不存在，说明字符串不在集合中，返回 0 ；遍历结束后，返回最后一个节点的 cnt 值，表示该字符串出现的次数。</p> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>; <span class="comment">// 从根节点开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 字符映射为索引</span></span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 路径不存在，返回0</span></span><br><span class="line">        p = son[p][u]; <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p]; <span class="comment">// 返回该节点的计数器值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果大家还是觉得上面的题解比较难懂，不妨看看这个视频：<a href="https://www.bilibili.com/video/BV1yA4y1Z74t?spm_id_from=333.788.videopod.sections&vd_source=dae1ec590e342c3d3aa838fa43db2803">Trie字典树</a></p></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Trie（字典树）: 高效存储和查找字符串集合的数据结构</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>]; <span class="comment">//存储从节点 P 沿着 i 这条边走到的子节点</span></span><br><span class="line"><span class="type">int</span> cnt[N]; <span class="comment">//存储以节点 p 结尾的单词插入次数</span></span><br><span class="line"><span class="type">int</span> idx;    <span class="comment">//给每个节点编号（节点数）</span></span><br><span class="line"><span class="type">char</span> str[N];    <span class="comment">//处理的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>; <span class="comment">// 从根节点（编号0）开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;  <span class="comment">// 将字符映射为0-25的索引</span></span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) son[p][u] = ++idx; <span class="comment">// 如果路径不存在，创建新节点</span></span><br><span class="line">        p = son[p][u]; <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p]++; <span class="comment">// 标记字符串结尾，计数器加1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>; <span class="comment">// 从根节点开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 字符映射为索引</span></span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 路径不存在，返回0</span></span><br><span class="line">        p = son[p][u]; <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p]; <span class="comment">// 返回该节点的计数器值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>, op, str);</span><br><span class="line">        <span class="keyword">if</span> (*op == <span class="string">&#x27;I&#x27;</span>) <span class="built_in">insert</span>(str);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(m)，其中 m 为字符串长度<br>空间复杂度：O (N * 26)，N 为节点总数</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_6</title>
      <link href="/undefined/98f524f0.html"/>
      <url>/undefined/98f524f0.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>英语背了一个小时单词<br><img src="https://pic1.imgdb.cn/item/686a2f0858cb8da5c892606c.png" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_154滑动窗口</title>
      <link href="/undefined/ea7ea85b.html"/>
      <url>/undefined/ea7ea85b.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/68692dc358cb8da5c89176ce.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定一个长度为 n 的数组，和一个大小为 k 的滑动窗口，滑动窗口从数组的最左端移动到最右端，每次移动一个位置，要求输出每个窗口中的最小值和最大值。</p><p>输入输出样例：<br>输入：</p><blockquote><p>8 3<br>1 3 -1 -3 5 3 6 7</p></blockquote><p>输出：</p><blockquote><p>-1 -3 -3 -3 3 3<br>3 3 5 5 6 7</p></blockquote><p>详情：<a href="https://www.acwing.com/activity/content/problem/content/868/">ac_154滑动窗口</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p><strong>单调队列</strong>：队列中的元素保持单调递增或单调递减：</p><ol><li>对于最小值问题，维护一个<strong>单调递增队列</strong>：队列头部是当前窗口的最小值，新元素入队时，删除队列中所有比它大的元素，以保持队列单调递增。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//判断队头元素是否还在队列里面，不应该在，则弹出队头元素（保持 k 个元素）</span></span><br><span class="line">    <span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line">    <span class="comment">//队列不为空且队尾元素大于等于 x 时，弹出队尾元素（使队列具有单调性）</span></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt--;</span><br><span class="line">    <span class="comment">//当前元素下标 i 入队</span></span><br><span class="line">    q[++tt] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对于最大值问题，维护一个<strong>单调递减队列</strong>：队列头部是当前窗口的最大值，新元素入队时，删除队列中所有比它小的元素，以保持队列单调递减。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line">    <span class="comment">//队列不为空且队尾元素小于等于 x 时，弹出队尾元素（使队列具有单调性）</span></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt--;</span><br><span class="line">    <span class="comment">//当前元素下标 i 入队</span></span><br><span class="line">    q[++tt] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N], q[N]; <span class="comment">//数组  单调队列：存储元素下标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断队头元素是否还在队列里面，不应该在，则弹出队头元素（保持 k 个元素）</span></span><br><span class="line">        <span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line">        <span class="comment">//队列不为空且队尾元素大于等于 x 时，弹出队尾元素（使队列具有单调性）</span></span><br><span class="line">        <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt--;</span><br><span class="line">        <span class="comment">//当前元素下标 i 入队</span></span><br><span class="line">        q[++tt] = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh]) hh++;</span><br><span class="line">        <span class="comment">//队列不为空且队尾元素小于等于 x 时，弹出队尾元素（使队列具有单调性）</span></span><br><span class="line">        <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i]) tt--;</span><br><span class="line">        <span class="comment">//当前元素下标 i 入队</span></span><br><span class="line">        q[++tt] = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(n)<br>空间复杂度：O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_830单调栈</title>
      <link href="/undefined/c956a476.html"/>
      <url>/undefined/c956a476.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/68692d7c58cb8da5c89176bb.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定一个长度为 n 的整数数列，要求输出每个数左边第一个比它小的数，如果不存在则输出 -1。</p><p>输入输出样例：<br>输入：</p><blockquote><p>5<br>3 4 2 7 5</p></blockquote><p>输出：</p><blockquote><p>-1 3 -1 2 2</p></blockquote><p>详情：<a href="https://www.acwing.com/activity/content/problem/content/867/">ac_830单调栈</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>维护一个栈，栈中元素保持单调递增的顺序。遍历数列时，对于当前元素 x，不断弹出栈顶元素直到栈顶元素小于 x 或者栈为空。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stk[N], tt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="comment">//栈不为空且栈顶元素大于等于 x 时，弹出栈顶元素（使栈具有单调性）</span></span><br><span class="line">        <span class="keyword">while</span> (tt &amp;&amp; stk[tt] &gt;= x) tt--;</span><br><span class="line">        <span class="comment">//如果栈空</span></span><br><span class="line">        <span class="keyword">if</span> (!tt) <span class="built_in">printf</span>(<span class="string">&quot;-1 &quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, stk[tt]);</span><br><span class="line">        <span class="comment">// x 入栈</span></span><br><span class="line">        stk[++tt] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(n)<br>空间复杂度：O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_5</title>
      <link href="/undefined/1fc754a.html"/>
      <url>/undefined/1fc754a.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>英语背了一个小时单词<br><img src="https://pic1.imgdb.cn/item/6869260058cb8da5c8917542.png" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_4</title>
      <link href="/undefined/76fb45dc.html"/>
      <url>/undefined/76fb45dc.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>校集训侥幸拿了 NO.1 哈哈哈~~<br><img src="https://pic1.imgdb.cn/item/6869d7d758cb8da5c891ad3a.png" alt="25_7_4_暑期集训1" title="25_7_4_暑期集训1"></p><p>英语背了一个小时单词<br><img src="https://pic1.imgdb.cn/item/6867eb6258cb8da5c8909bd4.png" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_3</title>
      <link href="/undefined/e89fd07f.html"/>
      <url>/undefined/e89fd07f.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>英语背了一个小时单词<br><img src="https://pic1.imgdb.cn/item/6866907258cb8da5c88daeb5.png" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_801二进制中1的个数</title>
      <link href="/undefined/d2ef01f2.html"/>
      <url>/undefined/d2ef01f2.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/6866365958cb8da5c88baa76.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>求出给定数列中每个数的二进制表示中 1 的个数。</p><p>输入输出样例：<br>输入：</p><blockquote><p>5<br>1 2 3 4 5</p></blockquote><p>输出：</p><blockquote><p>1 1 2 1 2</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/803/">ac_801二进制中1的个数</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这题求二进制数就是采用“除基取余”法：</p><ol><li>将一个数除以2得到的余数作二进制数的数值位（低位），循环进行直到这个数除以2商是0，它的余数为最高位，这样的余数组成的数就是这个数的二进制数： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> tmp = q[i], cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(tmp != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(tmp % <span class="number">2</span> == <span class="number">1</span>) cnt++;</span><br><span class="line">    tmp/=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cnt);</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> tmp = q[i], cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(tmp != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp % <span class="number">2</span> == <span class="number">1</span>) cnt++;</span><br><span class="line">            tmp/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(n)<br>空间复杂度：O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_2816判断子序列</title>
      <link href="/undefined/d6b5203a.html"/>
      <url>/undefined/d6b5203a.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/6866291e58cb8da5c88b8d9b.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定 a，b 两个子序列，判断 a 序列是否是 b 序列的子序列，是：Yes，否：No。</p><p>输入输出样例：<br>输入：</p><blockquote><p>3 5<br>1 3 5<br>1 2 3 4 5</p></blockquote><p>输出：</p><blockquote><p>Yes</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/2818/">ac_2816判断子序列</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这题采用双指针的思想，可以参考<a href="https://coder2433.github.io/undefined/5802667c.html">ac_800数组元素的目标和</a>：</p><ol><li>定义 i，j 指针分别指向 a，b 序列的左端点，j一直右移循环遍历，若 a[i] &#x3D;&#x3D; b[j] 则 i++ ，当 i&#x3D;&#x3D;n 时则 a 是 b 的子序列： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; n &amp;&amp; j &lt; m)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i] == b[j]) i++;</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n &amp;&amp; j &lt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == b[j]) i++;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(i == n) <span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(n + m)<br>空间复杂度：O(n + m)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_800数组元素的目标和</title>
      <link href="/undefined/5802667c.html"/>
      <url>/undefined/5802667c.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/68661d5058cb8da5c88b60f9.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>在两个数组中，找出满足 A[i] + B[j] &#x3D; x 的数对（i，j）。</p><p>输入输出样例：<br>输入：</p><blockquote><p>4 5 6<br>1 2 4 7<br>3 4 6 8 9</p></blockquote><p>输出：</p><blockquote><p>1 1</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/802/">ac_800数组元素的目标和</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这题采用双指针的思想，具体：</p><ol><li>定义 i 指针指向 A 数组的左端点，j 指针指向 B 数组的右端点向左移动，由于 A，B 都是递增有序数组，当 A[i] + B[j] &#x3D; x 时输出这个答案并跳出循环，i 指针右移继续寻找： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = m - <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; A[i] + B[j] &gt; x) j--;</span><br><span class="line">    <span class="keyword">if</span>(A[i] + B[j] == x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, i, j);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, x;</span><br><span class="line"><span class="type">int</span> A[N], B[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m ,&amp;x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;B[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = m - <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; A[i] + B[j] &gt; x) j--;</span><br><span class="line">        <span class="keyword">if</span>(A[i] + B[j] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, i, j);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(n + m)<br>空间复杂度：O(n + m)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_799最长连续不重复子序列</title>
      <link href="/undefined/f12a59b.html"/>
      <url>/undefined/f12a59b.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/6865f9a358cb8da5c88b00c7.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定一个长度为 n 的整数序列，请找出<strong>最长的不包含重复的数的连续区间</strong>，输出它的长度。</p><p>输入输出样例：<br>输入：</p><blockquote><p>5<br>1 2 2 3 5</p></blockquote><p>输出：</p><blockquote><p>3</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/description/801/">ac_799最长连续不重复子序列</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这题采用双指针的思想，具体：</p><ol><li>采用 map 哈希表存储数列中个元素出现的次数，i 指针往后移动，当 mp[a[i]] &gt; 1 时，表示前面有重复元素，此时将 j 指针后移一位并 mp[a[j]]– ： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">...</span><br><span class="line">mp[a[i]]++;</span><br><span class="line"><span class="keyword">while</span>(mp[a[i]] &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    mp[a[j]]--;</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>res 记录最长连续不重复子序列： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">res = <span class="built_in">max</span>(res, i - j + <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// s[a[i]]++; 用数组或者哈希表来存储都可以</span></span><br><span class="line">        mp[a[i]]++;</span><br><span class="line">        <span class="keyword">while</span>(mp[a[i]] &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// s[a[j]]--;</span></span><br><span class="line">            mp[a[j]]--;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res, i - j + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(nlogn)  map 基于红黑树实现，单次操作时间为 O(logn)，数组存储的话就是 O(n);<br>空间复杂度：O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_798差分矩阵</title>
      <link href="/undefined/c068f886.html"/>
      <url>/undefined/c068f886.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/6865e78658cb8da5c88ae709.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>在一个给定的 n * m 的矩阵中，将给定的子矩阵中的元素都加上c。</p><p>输入输出样例：<br>输入：</p><blockquote><p>3 4 3<br>1 2 2 1<br>3 2 2 1<br>1 1 1 1<br>1 1 2 2 1<br>1 3 2 3 2<br>3 1 3 4 1</p></blockquote><p>输出：</p><blockquote><p>2 3 4 1<br>4 3 4 1<br>2 2 2 2</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/800/">ac_798差分矩阵</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>差分矩阵的思想可以参考<a href="https://coder2433.github.io/undefined/e56fa37b.html">ac_797差分</a>和<a href="https://coder2433.github.io/undefined/5bb9664b.html">ac_796子矩阵的和</a>。</p><ol><li>构造差分矩阵： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[x1][y1] += c; <span class="comment">//原前缀和矩阵（x1,y1）后面的元素都会 + c</span></span><br><span class="line">    b[x2<span class="number">+1</span>][y1] -= c;   <span class="comment">//进行抵消，只在给定区间 + c</span></span><br><span class="line">    b[x1][y2<span class="number">+1</span>] -= c;</span><br><span class="line">    b[x2<span class="number">+1</span>][y2<span class="number">+1</span>] +=c;  <span class="comment">//进行补偿</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>还原成前缀和矩阵： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        b[i][j] = b[i<span class="number">-1</span>][j] + b[i][j<span class="number">-1</span>] - b[i<span class="number">-1</span>][j<span class="number">-1</span>] + b[i][j];</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">const</span>  <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> a[N][N], b[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[x1][y1] += c; <span class="comment">//原前缀和矩阵（x1,y1）后面的元素都会 + c</span></span><br><span class="line">    b[x2<span class="number">+1</span>][y1] -= c;   <span class="comment">//进行抵消，只在给定区间 + c</span></span><br><span class="line">    b[x1][y2<span class="number">+1</span>] -= c;</span><br><span class="line">    b[x2<span class="number">+1</span>][y2<span class="number">+1</span>] +=c;  <span class="comment">//进行补偿</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;=m; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">    <span class="comment">//b[i][j] = a[i][j] - a[i-1][j] - a[i][j-1] + a[i-1][j-1] </span></span><br><span class="line">    <span class="comment">//a矩阵是b矩阵的前缀和，b矩阵是a矩阵的差分        </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="built_in">insert</span>(i, j, i, j, a[i][j]);</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2, c;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;</span><br><span class="line">        <span class="built_in">insert</span>(x1, y1, x2, y2, c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//还原成前缀和矩阵</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            b[i][j] = b[i<span class="number">-1</span>][j] + b[i][j<span class="number">-1</span>] - b[i<span class="number">-1</span>][j<span class="number">-1</span>] + b[i][j];</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i][j]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(n * m + q)<br>空间复杂度：O(n * m)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和与差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_2</title>
      <link href="/undefined/9f98e0e9.html"/>
      <url>/undefined/9f98e0e9.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>英语背了一个小时单词<br><img src="https://pic1.imgdb.cn/item/68654a2358cb8da5c88a339d.png" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_797差分</title>
      <link href="/undefined/e56fa37b.html"/>
      <url>/undefined/e56fa37b.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/686529ee58cb8da5c88a2389.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>在一个给定的 n 个元素的数列中，将 [l, r]之间的元素都加上c（循环遍历时间复杂度为 O(n) 可能会超时，采用<strong>差分解决类似的问题可以降低时间复杂度至 O(1)</strong>）。</p><p>输入输出样例：<br>输入：</p><blockquote><p>6 3<br>1 2 2 1 2 1<br>1 3 1<br>3 5 1<br>1 6 1</p></blockquote><p>输出：</p><blockquote><p>3 4 5 3 4 2</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/799/">ac_797差分</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>首先差分和前缀和思想是互逆的，前缀和是求子区间和，差分是在子区间每个元素上加上元素 c。</p><ol><li>输入数组 a ，得到它的差分 b 数组： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="comment">//b[i] = a[i] - a[i-1] a数组是b数组的前缀和，b数组是a数组的差分</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">insert</span>(i, i, a[i]);</span><br><span class="line">...</span><br><span class="line"><span class="comment">//对区间 [l, r] 加 c 时，只需 b[l] += c 和 b[r+1] -= c，将区间操作转换为端点操作。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[l] += c;</span><br><span class="line">    b[r<span class="number">+1</span>] -= c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>输出结果时，将 b 数组还原成前缀和数组： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//还原成前缀和数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) b[i] += b[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>  + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], b[N]; </span><br><span class="line"></span><br><span class="line"><span class="comment">//对区间 [l, r] 加 c 时，只需 b[l] += c 和 b[r+1] -= c，将区间操作转换为端点操作。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[l] += c;</span><br><span class="line">    b[r<span class="number">+1</span>] -= c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="comment">//b[i] = a[i] - a[i-1] a数组是b数组的前缀和，b数组是a数组的差分</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">insert</span>(i, i, a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;l, &amp;r, &amp;c);</span><br><span class="line">        <span class="built_in">insert</span>(l, r, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//还原成前缀和数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) b[i] += b[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(n + m)<br>空间复杂度：O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和与差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_796子矩阵的和</title>
      <link href="/undefined/5bb9664b.html"/>
      <url>/undefined/5bb9664b.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/6864f21a58cb8da5c8886431.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>在一个给定的 n 行 m 列矩阵中，查询出子矩阵的和。</p><p>输入输出样例：<br>输入：</p><blockquote><p>3 4 3<br>1 7 2 4<br>3 6 2 8<br>2 1 2 3<br>1 1 2 2<br>2 1 3 4<br>1 3 3 4</p></blockquote><p>输出：</p><blockquote><p>17<br>27<br>21</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/798/">ac_796子矩阵的和</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>子矩阵的和需要注意2点。</p><ol><li>计算前缀和：<br> <img src="https://pic1.imgdb.cn/item/6864fbf558cb8da5c888b3ad.png" alt="示意图1" title="示意图1"> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算前缀和</span></span><br><span class="line">res[i][j] = res[i<span class="number">-1</span>][j] + res[i][j<span class="number">-1</span>] - res[i<span class="number">-1</span>][j<span class="number">-1</span>] + arr[i][j];</span><br></pre></td></tr></table></figure></li><li>计算矩阵区间和：<br> <img src="https://pic1.imgdb.cn/item/6864fbf558cb8da5c888b3ac.png" alt="示意图2" title="示意图2"> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算矩阵区间和</span></span><br><span class="line">cout&lt;&lt;res[x2][y2] - res[x1<span class="number">-1</span>][y2] - res[x2][y1<span class="number">-1</span>] + res[x1<span class="number">-1</span>][y1<span class="number">-1</span>]&lt;&lt;endl;</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">int</span> arr[N][N];</span><br><span class="line"><span class="type">int</span> res[N][N] = &#123;<span class="number">0</span>&#125;; <span class="comment">//res[i, j] 为第i行j列格子左上部分所有元素的和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i][j]);</span><br><span class="line">            <span class="comment">//计算前缀和（以res[3][2]为例）</span></span><br><span class="line">            res[i][j] = res[i<span class="number">-1</span>][j] + res[i][j<span class="number">-1</span>] - res[i<span class="number">-1</span>][j<span class="number">-1</span>] + arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">        <span class="comment">//计算矩阵区间和</span></span><br><span class="line">        cout&lt;&lt;res[x2][y2] - res[x1<span class="number">-1</span>][y2] - res[x2][y1<span class="number">-1</span>] + res[x1<span class="number">-1</span>][y1<span class="number">-1</span>]&lt;&lt;endl; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(n * m + q)<br>空间复杂度：O(n * m)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和与差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_795前缀和</title>
      <link href="/undefined/a177aa9f.html"/>
      <url>/undefined/a177aa9f.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/6864b71858cb8da5c8869cb6.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>对于每个询问，输出原序列中从第 l 个数到第 r 个数的和。</p><p>输入输出样例：<br>输入：</p><blockquote><p>5 3<br>2 1 3 6 4<br>1 2<br>1 3<br>2 4</p></blockquote><p>输出：</p><blockquote><p>3<br>6<br>10</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/797/">ac_795前缀和</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>前缀和需要注意1点。</p><ol><li>需要明确 res[i] 表示前i个元素的和，因此： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    res[i] = res[i<span class="number">-1</span>] + q[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"><span class="type">int</span> res[N] = &#123;<span class="number">0</span>&#125;; <span class="comment">// res[i]表示前i个元素的和（从1开始）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">        res[i] = res[i<span class="number">-1</span>] + q[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res[r] - res[l<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(n + m) 输入时遍历 n 个元素数组 res + m 次询问<br>空间复杂度：O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和与差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_793高精度乘法</title>
      <link href="/undefined/b5770e68.html"/>
      <url>/undefined/b5770e68.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/68649a5658cb8da5c8863273.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定两个正整数，计算高精度整数乘以低精度整数。</p><p>输入输出样例：<br>输入：</p><blockquote><p>2<br>3</p></blockquote><p>输出：</p><blockquote><p>6</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/795/">ac_793高精度乘法</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>高精度乘法需要注意2点。</p><ol><li>计算机处理乘法是将被乘数的每一位乘以乘数，然后赋值给进位 t ，t%10 作结果的数值位，t&#x2F;10作进位： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> t = <span class="number">0</span>;  <span class="comment">//进位</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">    c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">    t /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>去除结果的前导0： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(c.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; c.<span class="built_in">back</span>() == <span class="number">0</span>) c.<span class="built_in">pop_back</span>();  <span class="comment">//去除结果的前导0</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;  <span class="comment">//进位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(c.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; c.<span class="built_in">back</span>() == <span class="number">0</span>) c.<span class="built_in">pop_back</span>();  <span class="comment">//去除结果的前导0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//高精度整数乘以低精度整数</span></span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> c = <span class="built_in">mul</span>(A, b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = c.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>假设 a 和 b 的长度分别为 n 和 m，则：<br>时间复杂度：O(n + m)<br>空间复杂度：O(n + m)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_794高精度除法</title>
      <link href="/undefined/8f2c8dde.html"/>
      <url>/undefined/8f2c8dde.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/68649a5658cb8da5c8863274.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定两个正整数，计算高精度整数除以低精度整数。</p><p>输入输出样例：<br>输入：</p><blockquote><p>7<br>2</p></blockquote><p>输出：</p><blockquote><p>3<br>1</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/796/">ac_794高精度除法</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>高精度除法需要注意3点。</p><ol><li>除法和加减乘法不同，它可以正序存储，但为统一模板，这里也采用逆序将其存储，因此div函数的循环条件需要更改： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>余数 r 要模拟除法运算，r&#x2F;b 作商的数值位；r %&#x3D; b 作下一位的余数： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">    r = r * <span class="number">10</span> + A[i];</span><br><span class="line">    c.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">    r %= b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>由于是逆序存储且逆序输出，则答案需要反转一下并去除结果的前导0： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">reverse</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">while</span>(c.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; c.<span class="built_in">back</span>() == <span class="number">0</span>) c.<span class="built_in">pop_back</span>();</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">    </span><br><span class="line">    r = <span class="number">0</span>;  <span class="comment">//余数先置0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        c.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span>(c.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; c.<span class="built_in">back</span>() == <span class="number">0</span>) c.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> r; <span class="comment">//存储余数</span></span><br><span class="line">    <span class="comment">//高精度整数除以低精度整数</span></span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> c = <span class="built_in">div</span>(A, b, r);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = c.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%d&quot;</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>假设 a 和 b 的长度分别为 n 和 m，则：<br>时间复杂度：O(n + m)<br>空间复杂度：O(n + m)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_7_1</title>
      <link href="/undefined/691b153.html"/>
      <url>/undefined/691b153.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>英语背了一个小时单词<br><img src="https://pic1.imgdb.cn/item/6863ece958cb8da5c8850cad.jpg" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_792高精度减法</title>
      <link href="/undefined/39c259d.html"/>
      <url>/undefined/39c259d.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/6863e0c258cb8da5c884cb38.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定两个正整数，计算它们的差。</p><p>输入输出样例：<br>输入：</p><blockquote><p>32<br>11</p></blockquote><p>输出：</p><blockquote><p>21</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/794/">ac_792高精度减法</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>高精度减法需要注意3点。</p><ol><li>由于是两个正整数相减，结果可能为负数，因此需判断两个正整数大小： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断A &gt;= B</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; A, vector&lt;<span class="type">int</span>&gt; B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span>(A[i] != B[i]) <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义 t 记录相减时是否借位，若借位，则下轮置 t&#x3D;1；否则置 t&#x3D;0： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> t = <span class="number">0</span>;  <span class="comment">//借位</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">    t = A[i] - t;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">    c.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>返回结果时需去除结果的前导0： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(c.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; c.<span class="built_in">back</span>() == <span class="number">0</span>) c.<span class="built_in">pop_back</span>();   <span class="comment">//去除结果的前导0</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断A &gt;= B</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; A, vector&lt;<span class="type">int</span>&gt; B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span>(A[i] != B[i]) <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;  <span class="comment">//借位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">        c.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>(t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(c.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; c.<span class="built_in">back</span>() == <span class="number">0</span>) c.<span class="built_in">pop_back</span>();   <span class="comment">//去除结果的前导0</span></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">    </span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">cmp</span>(A, B))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> c = <span class="built_in">sub</span>(A, B);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = c.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> c = <span class="built_in">sub</span>(B, A);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = c.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>假设 a 和 b 的长度分别为 n 和 m，则：<br>时间复杂度：O(n + m)<br>空间复杂度：O(n + m)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_791高精度加法</title>
      <link href="/undefined/2a95eab6.html"/>
      <url>/undefined/2a95eab6.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/6863cca458cb8da5c8843420.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定两个正整数，计算它们的和。</p><p>输入输出样例：<br>输入：</p><blockquote><p>12<br>23</p></blockquote><p>输出：</p><blockquote><p>35</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/793/">ac_791高精度加法</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>高精度加法需要注意2点。</p><ol><li>用户输入的两个整数数值可能比较大，需要用字符串 string 进行读取，然后再存到 vector 容器中： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string a, b;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line"></span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="comment">//注意要逆序存储到 vector 容器中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>定义 t 记录相加时是否进位，将 t%10 作为结果的数值位，t&#x2F;&#x3D;10作为进位： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t = <span class="number">0</span>; <span class="comment">//进位</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; A.<span class="built_in">size</span>()) t += A[i];</span><br><span class="line">    <span class="keyword">if</span>(i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">    c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">    t /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(t) c.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>; <span class="comment">//进位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; A.<span class="built_in">size</span>()) t += A[i];</span><br><span class="line">        <span class="keyword">if</span>(i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(t) c.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">    </span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> c = <span class="built_in">add</span>(A, B);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = c.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, c[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>假设 a 和 b 的长度分别为 n 和 m，则：<br>时间复杂度：O(n + m)<br>空间复杂度：O(n + m)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_790数的三次方根</title>
      <link href="/undefined/6b7603b1.html"/>
      <url>/undefined/6b7603b1.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/686389a158cb8da5c882b9f9.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定一个浮点数 n ，求它的三次方根（结果保留6位小数）。</p><p>输入输出样例：<br>输入：</p><blockquote><p>1000.00</p></blockquote><p>输出：</p><blockquote><p>10.000000</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/792/">ac_790数的三次方根</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这题就是简单的二分，有两个地方需要注意。</p><ol><li>小数的精度 eps 需要在给定的精度上 +2 来确保结果的准确性： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br></pre></td></tr></table></figure></li><li>确定 left 和 right 的初值，当 n &gt;&#x3D; 0 时，right 至少 &gt;&#x3D;1；当 n &lt; 0 时，left 至少 &lt;&#x3D; -1： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据n的正负设置初始区间</span></span><br><span class="line"><span class="keyword">if</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    left = <span class="number">0</span>, right = <span class="built_in">max</span>(<span class="number">1.0</span>, n);  <span class="comment">// 处理n &lt; 1的正数</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    left = <span class="built_in">min</span>(n, <span class="number">-1.0</span>), right = <span class="number">0</span>;  <span class="comment">// 处理n &gt; -1的负数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((x * x * x) &gt;= n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//结果精确到小数点后6位，则eps要开6+2=8位</span></span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line">    <span class="keyword">while</span>(r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">double</span> left, right;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据n的正负设置初始区间</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        left = <span class="number">0</span>, right = <span class="built_in">max</span>(<span class="number">1.0</span>, n);  <span class="comment">// 处理n &lt; 1的正数</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        left = <span class="built_in">min</span>(n, <span class="number">-1.0</span>), right = <span class="number">0</span>;  <span class="comment">// 处理n &gt; -1的负数</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> res = <span class="built_in">bsearch_3</span>(left, right);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6lf&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(logn)<br>空间复杂度：O(1)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_789数的范围</title>
      <link href="/undefined/dba610dd.html"/>
      <url>/undefined/dba610dd.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/68634cde58cb8da5c8811941.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定一个长度为 n 的整数数列以及 q 个查询，对于每个查询，返回元素 k 的起始和终止位置，若 k 不存在返回-1 -1）。</p><p>输入输出样例：<br>输入：</p><blockquote><p>6 3<br>1 2 2 3 3 4<br>3<br>4<br>5</p></blockquote><p>输出：</p><blockquote><p>3 4<br>5 5<br>-1 -1</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/791/">ac_789数的范围</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>需要用到两次二分分别查询元素 k 的起始和终止位置。</p><ol><li>查询元素 k 的起始位置： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过 mid = l + r &gt;&gt; 1 和 r = mid 确保向左收缩，找到左边界。</span></span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(q[mid] &gt;= k) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(q[l] != k) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>查询元素 k 的终止位置： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//mid = l + r + 1 &gt;&gt; 1 和 l = mid 确保向右收缩，找到右边界。</span></span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(q[mid] &lt;= k) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(q[l] != k) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(q[mid] &gt;= k) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(q[l] != k) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(q[mid] &lt;= k) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(q[l] != k) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">bsearch_1</span>(<span class="number">0</span>, n<span class="number">-1</span>, k);</span><br><span class="line">        <span class="keyword">if</span>(l != <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> r = <span class="built_in">bsearch_2</span>(<span class="number">0</span>, n<span class="number">-1</span>, k);</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(logn)<br>空间复杂度：O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_788逆序对的数量</title>
      <link href="/undefined/abdebc00.html"/>
      <url>/undefined/abdebc00.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/6863366f58cb8da5c880ae18.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定一个长度为 n 的整数数列，请你计算数列中的逆序对的数量。（逆序对：i &lt; j 但 q[i] &gt; q[j]，&lt;i, j&gt; 构成一个逆序对）</p><p>输入输出样例：<br>输入:</p><blockquote><p>6<br>2 3 4 5 6 1</p></blockquote><p>输出：</p><blockquote><p>5</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/description/790/">ac_788逆序对的数量</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>利用到归并排序的分治思想，递归排序的自顶向下过程中，统计3种情况的逆序对数量。<br><img src="https://pic1.imgdb.cn/item/6863366e58cb8da5c880ae16.png" alt="示意图" title="示意图"></p><ol><li>统计红色区间的逆序对数量： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">LL res = <span class="built_in">merge_sort</span>(l, mid) + <span class="built_in">merge_sort</span>(mid + <span class="number">1</span>, r);</span><br></pre></td></tr></table></figure></li><li>统计蓝色区间的逆序对数量： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">LL res = <span class="built_in">merge_sort</span>(l, mid) + <span class="built_in">merge_sort</span>(mid + <span class="number">1</span>, r);</span><br></pre></td></tr></table></figure></li><li>统计mid两边的逆序对数量： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//归并过程并计数逆序对</span></span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(q[i] &lt;= q[j]) tmp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        tmp[k++] = q[j++];</span><br><span class="line">        res += mid - i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N], tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    LL res = <span class="built_in">merge_sort</span>(l, mid) + <span class="built_in">merge_sort</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//归并过程并计数逆序对</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j]) tmp[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tmp[k++] = q[j++];</span><br><span class="line">            res += mid - i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) tmp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) tmp[k++] = q[j++];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) q[i] = tmp[j];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, <span class="built_in">merge_sort</span>(<span class="number">0</span>, n - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(nlogn)<br>空间复杂度：O(n) 开辟了长度为n的temp数组</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记25_6_30</title>
      <link href="/undefined/8c354b39.html"/>
      <url>/undefined/8c354b39.html</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天英语背了一个小时单词<br><img src="https://pic1.imgdb.cn/item/6862aad258cb8da5c880580f.jpg" alt="不背单词" title="不背单词"></p>]]></content>
      
      
      <categories>
          
          <category> 25暑假单词打卡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_787归并排序</title>
      <link href="/undefined/d2217487.html"/>
      <url>/undefined/d2217487.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/6862828058cb8da5c8803262.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定一个长度为n的乱序数列，用<strong>归并排序</strong>将数列排成有序数列。</p><p>输入输出样例：<br>输入:</p><blockquote><p>5<br>3 1 2 4 5</p></blockquote><p>输出：</p><blockquote><p>1 2 3 4 5</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/789/">ac_787归并排序</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>归并排序也是采用分治思想，最开始数列每个元素单独作为一个子序列，然后相邻子序列两两归并，最后归并成一个子序列。</p><ol><li>确定分界点mid： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li>递归排序mid的左右子区间： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">merge_sort</span>(q, l, mid), <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br></pre></td></tr></table></figure></li><li>递归到mid左右区间只有一个元素后开始归并： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//k为temp数组的索引，i取左边子序列的左端点，j取右边子序列的左端点</span></span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(q[i] &lt;= q[j]) temp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">else</span> temp[k++] = q[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//检查哪组是否有剩余元素，并接到末尾</span></span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid) temp[k++] = q[i++];</span><br><span class="line"><span class="keyword">while</span>(j &lt;= r) temp[k++] = q[j++];</span><br><span class="line"></span><br><span class="line"><span class="comment">//将temp数组赋值给q数组</span></span><br><span class="line"><span class="keyword">for</span>(i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) q[i] = temp[j];</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N], temp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid), <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//k为temp数组的索引，i取左边子序列的左端点，j取右边子序列的左端点</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j]) temp[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span> temp[k++] = q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查哪组是否有剩余元素，并接到末尾</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) temp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) temp[k++] = q[j++];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将temp数组赋值给q数组</span></span><br><span class="line">    <span class="keyword">for</span>(i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) q[i] = temp[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">merge_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(nlogn)<br>空间复杂度：O(n) 开辟了长度为n的temp数组</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_786第k个数</title>
      <link href="/undefined/b7cf22ad.html"/>
      <url>/undefined/b7cf22ad.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/68611f1958cb8da5c87e0e08.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定一个长度为n的乱序数列，用<strong>快速选择算法</strong>求出数列从小到大排序后的第 k 个数。</p><p>输入输出样例：<br>输入:</p><blockquote><p>5 3<br>2 4 1 5 3</p></blockquote><p>输出：</p><blockquote><p>3</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/788/">ac_786第k个数</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这题是在快排算法上的pro版，需要你在每排序完一次，都需要与 k 做个判断：数列的哪边继续递归排序。</p><ol><li>定义 &lt;&#x3D; x 的一边元素数量为s1： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> s1 = j - l + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li>当 k &lt;&#x3D; s1 时，递归排序数列的左边；否则递归排序数列的右边 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(k &lt;= s1) <span class="keyword">return</span> <span class="built_in">quick_sort</span>(l, j, k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">quick_sort</span>(j<span class="number">+1</span>, r, k-s1);</span><br></pre></td></tr></table></figure></li><li>l &#x3D;&#x3D; r 时，即代表找到第 k 个排序后的元素 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(l == r) <span class="keyword">return</span> q[l];</span><br><span class="line">    ...</span><br><span class="line"> <span class="type">int</span> s1 = j - l + <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">if</span>(k &lt;= s1) <span class="keyword">return</span> <span class="built_in">quick_sort</span>(l, j, k);</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">quick_sort</span>(j<span class="number">+1</span>, r, k-s1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span><span class="number">+10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> q[l];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x = q[l + r &gt;&gt; <span class="number">1</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line"><span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line"><span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> s1 = j - l + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(k &lt;= s1) <span class="keyword">return</span> <span class="built_in">quick_sort</span>(l, j, k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">quick_sort</span>(j<span class="number">+1</span>, r, k-s1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="built_in">quick_sort</span>(<span class="number">0</span>, n<span class="number">-1</span>, k);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(n) 相比快排省去了递归排序数列两边所耗费的时间<br>空间复杂度：O(logn) 取决于快速排序形成的递归树调用栈的深度</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ac_785快速排序</title>
      <link href="/undefined/586416f2.html"/>
      <url>/undefined/586416f2.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://pic1.imgdb.cn/item/6861009858cb8da5c87e03e8.png" alt="原题" title="原题"></p><h1 id="题目大意-链接"><a href="#题目大意-链接" class="headerlink" title="题目大意&amp;链接"></a>题目大意&amp;链接</h1><p>给定一个长度为n的乱序数列，用<strong>快速排序</strong>将数列排成有序数列。</p><p>输入输出样例：<br>输入:</p><blockquote><p>5<br>3 1 2 4 5</p></blockquote><p>输出：</p><blockquote><p>1 2 3 4 5</p></blockquote><p>详情：<a href="https://www.acwing.com/problem/content/description/787/">ac_785快速排序</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>快速排序主要就是分治思想，将数列以<strong>枢轴x</strong>为标准，<strong>划分为两个区间</strong>（i&lt;&#x3D;x 和 j&gt;&#x3D;x），划分好后<strong>重新选取枢轴x</strong>依次<strong>递归处理</strong>其左右区间。</p><ol><li><p>枢轴选取：<br> 共有四种选取方式：左端点q[l]，右端点q[r]，中间索引q[l + r &gt;&gt; 1] 和 随机索引（这里我<strong>一般取中间索引作枢轴</strong>）</p> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = q[l + r &gt;&gt; <span class="number">1</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>调整区间：<br> 定义<strong>i</strong>和<strong>j</strong>两个指针，i指向&lt;&#x3D;x的区间，j指向&gt;&#x3D;x的区间</p> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = q[l + r &gt;&gt; <span class="number">1</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>递归处理左右区间</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line"><span class="built_in">quick_sort</span>(q, j<span class="number">+1</span> ,r);</span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> x = q[l + r &gt;&gt; <span class="number">1</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j<span class="number">+1</span> ,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">quick_sort</span>(q, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, q[i]);</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, q[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h1><p>时间复杂度：O(nlogn)<br>空间复杂度：O(logn) 取决于快速排序形成的递归树调用栈的深度</p>]]></content>
      
      
      <categories>
          
          <category> 25暑假acm集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习markdown语法</title>
      <link href="/undefined/f06228b3.html"/>
      <url>/undefined/f06228b3.html</url>
      
        <content type="html"><![CDATA[<h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2><h3 id="标题三"><a href="#标题三" class="headerlink" title="标题三"></a>标题三</h3><blockquote><p>这是一段引用</p></blockquote><p>有序列表：<br>把大象放进冰箱：</p><ol><li>打开冰箱</li><li>把大象塞进去<ol><li>吃饭</li><li>睡觉</li><li>打豆豆</li></ol></li><li>关上冰箱</li></ol><p>无序列表：</p><ul><li>吃饭</li><li>睡觉</li><li>打豆豆</li></ul><p>明天要做的事情:</p><ul><li><input disabled="" type="checkbox"> 吃饭</li><li><input disabled="" type="checkbox"> 睡觉</li><li><input checked="" disabled="" type="checkbox"> 打豆豆</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!);</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>表格:</p><table><thead><tr><th align="left">姓名</th><th align="right">年龄</th><th align="center">成绩</th></tr></thead><tbody><tr><td align="left">张三</td><td align="right">19</td><td align="center">99</td></tr><tr><td align="left">李四</td><td align="right">20</td><td align="center">100</td></tr></tbody></table><!-- 脚注：一键三连 ^[点赞投币收藏] --><p>横线：</p><hr><p>哈哈哈</p><p><a href="https://baidu.com/" title="一个搜索引擎">百度</a><br><a href="(https://baidu.com)" title="一个搜索引擎">百度</a><a href="(https://baidu.com)" title="一个搜索引擎">百度</a></p><p>请参考<a href="#%E6%A0%87%E9%A2%98%E4%B8%80">标题1</a></p><p>URL:<br><a href="http://baidu.com/">http://baidu.com</a></p><!-- ![桐爷](\img\壁纸1.png "一个搜索引擎") --><p><em>斜体</em><br><strong>粗体</strong><br><code>printf(&quot;hello world!&quot;)</code><br><u>下划线</u></p><!-- :smile:H~2~Ox^2^==这是一段高亮文字== -->]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/undefined/4a17b156.html"/>
      <url>/undefined/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
